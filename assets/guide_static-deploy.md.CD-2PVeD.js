import{_ as i,c as a,o as e,aq as l}from"./chunks/framework.CYFbgU53.js";const c=JSON.parse('{"title":"部署静态站点","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/guide/static-deploy"}],["meta",{"property":"og:title","content":"部署静态站点"}]]},"headers":[],"relativePath":"guide/static-deploy.md","filePath":"guide/static-deploy.md"}'),n={name:"guide/static-deploy.md"};function t(h,s,p,k,r,d){return e(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="deploying-a-static-site" tabindex="-1">部署静态站点 <a class="header-anchor" href="#deploying-a-static-site" aria-label="Permalink to “部署静态站点”">​</a></h1><p>本指南建立在以下几个假设基础之上：</p><ul><li>你正在使用的是默认的构建输出路径（<code>dist</code>）。这个路径 <a href="/config/build-options.html#build-outdir">可以通过 <code>build.outDir</code> 更改</a>，在这种情况下，你可以从这篇指南中找到所需的指引。</li><li>你正在使用 NPM；或者 Yarn 等其他可以运行下面的脚本指令的包管理工具。</li><li>Vite 已作为一个本地开发依赖（dev dependency）安装在你的项目中，并且你已经配置好了如下的 npm scripts：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="package.json">package.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>值得注意的是 <code>vite preview</code> 用作预览本地构建，而不应直接作为生产服务器。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>本篇指南提供了部署 Vite 静态站点的说明。Vite 也对服务端渲染（SSR）有了实验性的支持。SSR 是指支持在 Node 中运行相应应用的前端框架，预渲染成 HTML，最后在客户端激活（hydrate）。查看 <a href="./ssr.html">SSR 指南</a> 了解更多细节。另一方面，如果你在寻找与传统服务端框架集成的方式，那么请查看 <a href="./backend-integration.html">后端集成</a> 章节。</p></div><h2 id="building-the-app" tabindex="-1">构建应用 <a class="header-anchor" href="#building-the-app" aria-label="Permalink to “构建应用”">​</a></h2><p>你可以运行 <code>npm run build</code> 命令来执行应用的构建。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>默认情况下，构建会输出到 <code>dist</code> 文件夹中。你可以部署这个 <code>dist</code> 文件夹到任何你喜欢的平台。</p><h3 id="testing-the-app-locally" tabindex="-1">本地测试应用 <a class="header-anchor" href="#testing-the-app-locally" aria-label="Permalink to “本地测试应用”">​</a></h3><p>当你构建完成应用后，你可以通过运行 <code>npm run preview</code> 命令，在本地测试该应用。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span></span></code></pre></div><p><code>vite preview</code> 命令会在本地启动一个静态 Web 服务器，将 <code>dist</code> 文件夹运行在 <code>http://localhost:4173</code>。这样在本地环境下查看该构建产物是否正常可用就方便多了。</p><p>你可以通过 <code>--port</code> 参数来配置服务的运行端口。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="package.json">package.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview --port 8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>现在 <code>preview</code> 命令会将服务器运行在 <code>http://localhost:8080</code>。</p><h2 id="github-pages" tabindex="-1">GitHub Pages <a class="header-anchor" href="#github-pages" aria-label="Permalink to “GitHub Pages”">​</a></h2><ol><li><p>在 <code>vite.config.js</code> 中设置正确的 <code>base</code>。</p><p>如果你正要部署到 <code>https://&lt;USERNAME&gt;.github.io/</code>，或者通过 GitHub Pages 部署到一个自定义域名（例如 <code>www.example.com</code>），请将 <code>base</code> 设置为 <code>&#39;/&#39;</code>。或者，你也可以从配置中移除 <code>base</code>，因为它默认为 <code>&#39;/&#39;</code>。</p><p>如果你正在部署到 <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>（例如你的仓库地址为 <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>），那么请将 <code>base</code> 设置为 <code>&#39;/&lt;REPO&gt;/&#39;</code>。</p></li><li><p>进入仓库 settings 页面的 GitHub Pages 配置，选择部署来源为“GitHub Actions”，这将引导你创建一个构建和部署项目的工作流程，我们提供了一个安装依赖项和使用 npm 构建的工作流程样本：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一个简单的 GitHub Pages 部署工作流</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy static content to Pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 仅在推送到默认分支时运行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 这个选项可以使你手动在 Action tab 页面触发工作流</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">read</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  id-token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">write</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许一个并发部署</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">concurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pages&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cancel-in-progress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 单次部署的工作描述</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">github-pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ steps.deployment.outputs.page_url }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up Node</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lts/*</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;npm&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm ci</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/configure-pages@v5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Upload artifact</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/upload-pages-artifact@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 上传 dist 文件夹</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./dist&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deployment</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/deploy-pages@v4</span></span></code></pre></div></li></ol><h2 id="gitlab-pages-and-gitlab-ci" tabindex="-1">GitLab Pages 配合 GitLab CI <a class="header-anchor" href="#gitlab-pages-and-gitlab-ci" aria-label="Permalink to “GitLab Pages 配合 GitLab CI”">​</a></h2><ol><li><p>在 <code>vite.config.js</code> 中设置正确的 <code>base</code>。</p><p>如果你要部署在 <code>https://&lt;USERNAME or GROUP&gt;.gitlab.io/</code> 上，你可以省略 <code>base</code> 使其默认为 <code>&#39;/&#39;</code>。</p><p>如果你要部署在 <code>https://&lt;USERNAME or GROUP&gt;.gitlab.io/&lt;REPO&gt;/</code> 上，例如你的仓库地址为 <code>https://gitlab.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code>，那么请设置 <code>base</code> 为 <code>&#39;/&lt;REPO&gt;/&#39;</code>。</p></li><li><p>在项目根目录创建一个 <code>.gitlab-ci.yml</code> 文件，并包含以下内容。它将使得每次你更改内容时都重新构建与部署站点：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".gitlab-ci.yml">.gitlab-ci.yml</span></div><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node:lts</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package-lock.json</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      prefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cp -a dist/. public/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">public</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH</span></span></code></pre></div></div></li></ol><h2 id="netlify" tabindex="-1">Netlify <a class="header-anchor" href="#netlify" aria-label="Permalink to “Netlify”">​</a></h2><h3 id="netlify-cli" tabindex="-1">Netlify CLI <a class="header-anchor" href="#netlify-cli" aria-label="Permalink to “Netlify CLI”">​</a></h3><ol><li>安装 <a href="https://cli.netlify.com/" target="_blank" rel="noreferrer">Netlify CLI</a>。</li><li>使用 <code>ntl init</code> 创建一个新站点。</li><li>使用 <code>ntl deploy</code> 来部署。</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 Netlify CLI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> netlify-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 Netlify 中创建一个新站点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ntl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署一个独一无二的预览 URL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ntl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span></span></code></pre></div><p>Netlify CLI 会给你分享一个预览的 URL 来检查部署结果。当你准备好了发布生产版本时，请使用 <code>prod</code> 标志：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 部署站点到生产环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ntl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prod</span></span></code></pre></div><h3 id="netlify-with-git" tabindex="-1">Netlify with Git <a class="header-anchor" href="#netlify-with-git" aria-label="Permalink to “Netlify with Git”">​</a></h3><ol><li>将你的代码推送到 git 仓库（GitHub、GitLab、BitBucket 或是 Azure DevOps 等服务）</li><li>在 Netlify 中 <a href="https://app.netlify.com/start" target="_blank" rel="noreferrer">导入该项目</a></li><li>选择分支，输出目录，如果需要还可以设置环境变量。</li><li>点击 <strong>部署</strong></li><li>你的 Vite 应用就部署完成了！</li></ol><p>在你的项目被导入和部署后，所有对生产分支以外的其他分支（可能来自合并请求）的后续推送都会生成 <a href="https://docs.netlify.com/site-deploys/deploy-previews/" target="_blank" rel="noreferrer">预览部署</a>，所有对生产分支（通常是 &quot;main&quot;）的更改都会生成一个 <a href="https://docs.netlify.com/site-deploys/overview/#definitions" target="_blank" rel="noreferrer">生产部署</a>。</p><h2 id="vercel" tabindex="-1">Vercel <a class="header-anchor" href="#vercel" aria-label="Permalink to “Vercel”">​</a></h2><h3 id="vercel-cli" tabindex="-1">Vercel CLI <a class="header-anchor" href="#vercel-cli" aria-label="Permalink to “Vercel CLI”">​</a></h3><ol><li>安装 <a href="https://vercel.com/cli" target="_blank" rel="noreferrer">Vercel CLI</a> 并运行 <code>vercel</code> 来部署。</li><li>Vercel 会检测到你正在使用 Vite，并会为你开启相应的正确配置。</li><li>你的应用被部署好了！（示例：<a href="https://vite-vue-template.vercel.app/" target="_blank" rel="noreferrer">vite-vue-template.vercel.app</a>）</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vercel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vercel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vercel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CLI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Initialized</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vite&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/your-folder.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> To</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vercel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span></code></pre></div><h3 id="vercel-for-git" tabindex="-1">Vercel for Git <a class="header-anchor" href="#vercel-for-git" aria-label="Permalink to “Vercel for Git”">​</a></h3><ol><li>将你的代码推送到远程仓库（GitHub，GitLab，Bitbucket）</li><li><a href="https://vercel.com/new" target="_blank" rel="noreferrer">导入你的 Vite 仓库</a> 到 Vercel</li><li>Vercel 会检测到你正在使用 Vite，并会为你的部署开启相应的正确配置。</li><li>你的应用被部署好了！（示例：<a href="https://vite-vue-template.vercel.app/" target="_blank" rel="noreferrer">vite-vue-template.vercel.app</a>）</li></ol><p>在你的项目被导入和部署后，所有对分支的后续推送都会生成 <a href="https://vercel.com/docs/concepts/deployments/environments#preview" target="_blank" rel="noreferrer">预览部署</a>，而所有对生产分支（通常是&quot;main&quot;）的更改都会生成一个 <a href="https://vercel.com/docs/concepts/deployments/environments#production" target="_blank" rel="noreferrer">生产构建</a></p><p>查看 Vercel 的 <a href="https://vercel.com/docs/concepts/git" target="_blank" rel="noreferrer">Git 集成</a> 了解更多细节。</p><h2 id="cloudflare-pages" tabindex="-1">Cloudflare Pages <a class="header-anchor" href="#cloudflare-pages" aria-label="Permalink to “Cloudflare Pages”">​</a></h2><h3 id="cloudflare-pages-via-wrangler" tabindex="-1">Cloudflare Pages via Wrangler <a class="header-anchor" href="#cloudflare-pages-via-wrangler" aria-label="Permalink to “Cloudflare Pages via Wrangler”">​</a></h3><ol><li>安装 <a href="https://developers.cloudflare.com/workers/wrangler/get-started/" target="_blank" rel="noreferrer">Wrangler CLI</a>.</li><li>使用 <code>wrangler login</code>、通过你的 Cloudflare 账号完成 Wrangler 身份校验。</li><li>运行你的构建命令</li><li>使用 <code>npx wrangler pages deploy dist</code> 部署。</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 Wrangler CLI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wrangler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 CLI 工具登录 Cloudflare 账号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行构建命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个新的部署</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist</span></span></code></pre></div><p>在你的资产上传后，Wrangler 会给你一个预览 URL 来检查你的网站。当你登录到 Cloudflare Pages 仪表板时，你会看到你的新项目。</p><h3 id="cloudflare-pages-with-git" tabindex="-1">Cloudflare Pages with Git <a class="header-anchor" href="#cloudflare-pages-with-git" aria-label="Permalink to “Cloudflare Pages with Git”">​</a></h3><ol><li>将你的代码推送到你的 Git 仓库（GitHub, GitLab）</li><li>登录 Cloudflare 控制台，在 <strong>Account Home</strong> &gt; <strong>Pages</strong> 下选择你的账号</li><li>选择 <strong>Create a new Project</strong> 以及 <strong>Connect Git</strong> 选项</li><li>选择你想要部署的 Git 项目，然后点击 <strong>Begin setup</strong></li><li>根据你所选择的 Vite 框架，在构建设置中选择相应的框架预设</li><li>记得保存！然后部署吧！</li><li>然后你的应用就部署完成了！（例如： <code>https://&lt;PROJECTNAME&gt;.pages.dev/</code>）</li></ol><p>在你的项目被导入和部署后，所有对该分支的后续推送都会生成一个 <a href="https://developers.cloudflare.com/pages/platform/preview-deployments/" target="_blank" rel="noreferrer">预览部署</a>，除非你特意在 <a href="https://developers.cloudflare.com/pages/platform/branch-build-controls/" target="_blank" rel="noreferrer">控制分支构建</a> 的选项中写明不触发。所有对 <strong>生产分支</strong>（通常是 &quot;main&quot;）的更改都会生成一个 <strong>生产构建</strong>。</p><p>你也可以添加自定义域名，并自定义各个页面的构建设置。查看 <a href="https://developers.cloudflare.com/pages/get-started/#manage-your-site" target="_blank" rel="noreferrer">Cloudflare 页面与 Git 集成</a> 了解更多详情。</p><h2 id="google-firebase" tabindex="-1">Google Firebase <a class="header-anchor" href="#google-firebase" aria-label="Permalink to “Google Firebase”">​</a></h2><ol><li><p>确保已经安装 <a href="https://www.npmjs.com/package/firebase-tools" target="_blank" rel="noreferrer">firebase-tools</a>。</p></li><li><p>在项目根目录创建 <code>firebase.json</code> 和 <code>.firebaserc</code> 两个文件，包含以下内容：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="firebase.json">firebase.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;hosting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;ignore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;rewrites&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;destination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index.html&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".firebaserc">.firebaserc</span></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;projects&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;YOUR_FIREBASE_ID&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p>运行 <code>npm run build</code> 后，通过 <code>firebase deploy</code> 命令部署。</p></li></ol><h2 id="surge" tabindex="-1">Surge <a class="header-anchor" href="#surge" aria-label="Permalink to “Surge”">​</a></h2><ol><li><p>首先确保已经安装 <a href="https://www.npmjs.com/package/surge" target="_blank" rel="noreferrer">surge</a>。</p></li><li><p>运行 <code>npm run build</code>。</p></li><li><p>运行 <code>surge dist</code> 命令部署到 surge。</p></li></ol><p>你也可以通过添加 <code>surge dist yourdomain.com</code> 部署到一个 <a href="http://surge.sh/help/adding-a-custom-domain" target="_blank" rel="noreferrer">自定义域名</a>。</p><h2 id="azure-static-web-apps" tabindex="-1">Azure 的静态网站应用 <a class="header-anchor" href="#azure-static-web-apps" aria-label="Permalink to “Azure 的静态网站应用”">​</a></h2><p>你可以通过微软 Azure 的 <a href="https://aka.ms/staticwebapps" target="_blank" rel="noreferrer">静态网站应用</a> 服务来快速部署你的 Vite 应用。你只需：</p><ul><li>注册 Azure 账号并获取一个订阅（subscription）的 key。可以在 <a href="https://azure.microsoft.com/free" target="_blank" rel="noreferrer">此处快速完成注册</a>。</li><li>将你的应用代码托管到 <a href="https://github.com" target="_blank" rel="noreferrer">GitHub</a>。</li><li>在 <a href="https://code.visualstudio.com" target="_blank" rel="noreferrer">VSCode</a> 中安装 <a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps" target="_blank" rel="noreferrer">SWA 扩展</a>。</li></ul><p>安装完此扩展后，进入你应用的根目录。打开 SWA 的扩展程序，登录 Azure，并点击 &#39;+&#39;，来创建一个全新的 SWA。系统会提示你指定所需的订阅 key。</p><p>按照扩展程序的启动向导，给你的应用程序起个名字，选择框架预设，并指定应用程序的根目录（通常为 <code>/</code>）以及构建文件的路径 <code>/dist</code>。此向导完成后，会在你的 repo 中的 <code>.github</code> 文件夹中创建一个 GitHub Action。</p><p>这个 action 致力于部署你的应用程序（可以在仓库的 Actions 标签中，查看相关进度），成功完成后，你可以点击 GitHub 中出现的 “浏览站点” 的按钮，查看你的应用程序。</p><h2 id="render" tabindex="-1">Render <a class="header-anchor" href="#render" aria-label="Permalink to “Render”">​</a></h2><p>你可以在 <a href="https://render.com/" target="_blank" rel="noreferrer">Render</a> 部署你的 Vite 应用。</p><ol><li><p>创建一个 <a href="https://dashboard.render.com/register" target="_blank" rel="noreferrer">Render 账号</a></p></li><li><p>在 <a href="https://dashboard.render.com/" target="_blank" rel="noreferrer">控制台</a> 页面点击 <strong>New</strong> 按钮并选择 <strong>Static Site</strong>。</p></li><li><p>链接你的 GitHub/GitLab 账号或使用一个公共仓库</p></li><li><p>指定一个项目名称和所用分支</p><ul><li><strong>构建命令</strong>：<code>npm install &amp;&amp; npm run build</code></li><li><strong>发布目录</strong>：<code>dist</code></li></ul></li><li><p>点击 <strong>Create Static Site</strong></p><p>你的应用将会被部署在 <code>https://&lt;PROJECTNAME&gt;.onrender.com/</code>。</p></li></ol><p>默认情况下，推送到该指定分支的任何新的 commit 都会自动触发一个新的部署。<a href="https://render.com/docs/deploys#toggling-auto-deploy-for-a-service" target="_blank" rel="noreferrer">Auto-Deploy</a> 可以在项目设置中部署。</p><p>还可以为项目添加一个 <a href="https://render.com/docs/custom-domains" target="_blank" rel="noreferrer">自定义域名</a>。</p><h2 id="flightcontrol" tabindex="-1">Flightcontrol <a class="header-anchor" href="#flightcontrol" aria-label="Permalink to “Flightcontrol”">​</a></h2><p>根据 <a href="https://www.flightcontrol.dev/docs/reference/examples/vite?ref=docs-vite" target="_blank" rel="noreferrer">说明</a>，使用 <a href="https://www.flightcontrol.dev/?ref=docs-vite" target="_blank" rel="noreferrer">Flightcontrol</a> 来部署你的静态站点。</p><h2 id="kinsta-static-site-hosting" tabindex="-1">Kinsta 静态站点托管 <a class="header-anchor" href="#kinsta-static-site-hosting" aria-label="Permalink to “Kinsta 静态站点托管”">​</a></h2><p>根据 <a href="https://kinsta.com/docs/react-vite-example/" target="_blank" rel="noreferrer">说明</a>，使用 <a href="https://kinsta.com/static-site-hosting/" target="_blank" rel="noreferrer">Kinsta</a> 来部署你的静态站点。</p><h2 id="xmit-static-site-hosting" tabindex="-1">xmit 静态站点托管 <a class="header-anchor" href="#xmit-static-site-hosting" aria-label="Permalink to “xmit 静态站点托管”">​</a></h2><p>根据 <a href="https://xmit.dev/posts/vite-quickstart/" target="_blank" rel="noreferrer">说明</a>，使用 <a href="https://xmit.co" target="_blank" rel="noreferrer">xmit</a> 来部署你的静态站点。</p><h2 id="zephyr-cloud" tabindex="-1">Zephyr Cloud <a class="header-anchor" href="#zephyr-cloud" aria-label="Permalink to “Zephyr Cloud”">​</a></h2><p><a href="https://zephyr-cloud.io" target="_blank" rel="noreferrer">Zephyr Cloud</a> 是一个部署平台，它直接集成到您的构建过程中，并为模块联邦和其他类型的应用程序提供全球边缘分发。</p><p>Zephyr 与其他云提供商采用不同的方法。它直接与 Vite 构建流程集成，因此每次你构建或运行应用程序的开发服务器时，它都会自动部署到 Zephyr Cloud。</p><p>请按照 <a href="https://docs.zephyr-cloud.io/recipes/react-vite" target="_blank" rel="noreferrer">Vite 部署指南</a> 中的步骤开始使用。</p>`,73)])])}const g=i(n,[["render",t]]);export{c as __pageData,g as default};
