import{_ as i,c as n,o as a,aq as e}from"./chunks/framework.CYFbgU53.js";const c=JSON.parse('{"title":"钩子函数中的 this.environment","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/changes/this-environment-in-hooks"}],["meta",{"property":"og:title","content":"钩子函数中的 this.environment"}]]},"headers":[],"relativePath":"changes/this-environment-in-hooks.md","filePath":"changes/this-environment-in-hooks.md"}'),t={name:"changes/this-environment-in-hooks.md"};function h(l,s,p,o,k,r){return a(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="this-environment-in-hooks" tabindex="-1">钩子函数中的 this.environment <a class="header-anchor" href="#this-environment-in-hooks" aria-label="Permalink to “钩子函数中的 this.environment”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">反馈</p><p>可以在 <a href="https://github.com/vitejs/vite/discussions/16358" target="_blank" rel="noreferrer">环境 API 讨论</a> 中向我们提供反馈</p></div><p>在 Vite 6 版本之前，只有两个环境是可用的：<code>client</code> 和 <code>ssr</code>。在 <code>resolveId</code>、<code>load</code> 和 <code>transform</code> 中的 <code>options.ssr</code> 插件钩子参数，允许插件的作者在处理插件钩子中的模块时区分这两个环境。在 Vite 6 版本中，一个 Vite 应用可以根据需要定义任意数量的命名环境。我们在插件的上下文中引入了 <code>this.environment</code>，以便在钩子中与当前模块的环境进行交互。</p><p>影响范围：<code>Vite 插件作者</code></p><div class="warning custom-block"><p class="custom-block-title">即将废弃</p><p><code>this.environment</code> 最初在 <code>v6.0</code> 版本中被引入。我们计划在未来的 major 版本中废弃 <code>options.ssr</code>。到那时，我们会开始建议你将你的插件迁移到新的 API。如果想识别你的使用情况，可以在你的 vite 配置文件中将 <code>future.removePluginHookSsrArgument</code> 设置为 <code>&quot;warn&quot;</code>。</p></div><h2 id="motivation" tabindex="-1">动机 <a class="header-anchor" href="#motivation" aria-label="Permalink to “动机”">​</a></h2><p><code>this.environment</code> 不仅可以让插件钩子实现知道当前的环境名称，还可以让它访问到环境配置选项、模块图信息和转换管道（<code>environment.config</code>、<code>environment.moduleGraph</code>、<code>environment.transformRequest()</code>）。在上下文中可以使用环境实例，这让插件的作者可以避免依赖整个开发服务器（通常是在通过 <code>configureServer</code> 钩子启动时进行缓存）。</p><h2 id="migration-guide" tabindex="-1">迁移指南 <a class="header-anchor" href="#migration-guide" aria-label="Permalink to “迁移指南”">​</a></h2><p>对于现有的插件，如果想要快速迁移，可以在 <code>resolveId</code>、<code>load</code> 和 <code>transform</code> 钩子中，将 <code>options.ssr</code> 参数替换为 <code>this.environment.config.consumer === &#39;server&#39;</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Plugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resolveId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">importer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line diff remove"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isSSR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.ssr </span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isSSR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.environment.config.consumer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;server&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isSSR) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // SSR 特有逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 客户端特有逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于更稳定、长期的实现，插件钩子应该处理 <a href="/guide/api-environment-plugins.html#accessing-the-current-environment-in-hooks">多个环境</a>，并使用细粒度的环境选项，而不是依赖于环境的名称。</p>`,11)])])}const E=i(t,[["render",h]]);export{c as __pageData,E as default};
