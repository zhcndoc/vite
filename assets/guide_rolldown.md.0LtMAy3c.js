import{_ as n,I as e,c as t,o as h,j as i,J as p,aq as o,a}from"./chunks/framework.CYFbgU53.js";const b=JSON.parse('{"title":"Rolldown 集成","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/guide/rolldown"}],["meta",{"property":"og:title","content":"Rolldown 集成"}]]},"headers":[],"relativePath":"guide/rolldown.md","filePath":"guide/rolldown.md"}'),d={name:"guide/rolldown.md"};function k(r,s,c,E,g,u){const l=e("YouTubeVideo");return h(),t("div",null,[s[0]||(s[0]=i("h1",{id:"rolldown-integration",tabindex:"-1"},[a("Rolldown 集成 "),i("a",{class:"header-anchor",href:"#rolldown-integration","aria-label":"Permalink to “Rolldown 集成”"},"​")],-1)),s[1]||(s[1]=i("p",null,[a("Vite 计划将由 Rust 驱动的 JavaScript 打包工具 "),i("a",{href:"https://rolldown.rs",target:"_blank",rel:"noreferrer"},"Rolldown"),a(" 集成进来，以提升构建的性能和功能。")],-1)),p(l,{videoId:"RRjfm8cMveQ"}),s[2]||(s[2]=o(`<h2 id="what-is-rolldown" tabindex="-1">Rolldown 是什么？ <a class="header-anchor" href="#what-is-rolldown" aria-label="Permalink to “Rolldown 是什么？”">​</a></h2><p>Rolldown 是一个现代化、高性能的 JavaScript 打包工具，由 Rust 编写。它被设计为 Rollup 的替代品，旨在保持与现有生态系统兼容的同时，显著提升性能。</p><p>Rolldown 专注于三个主要原则：</p><ul><li><strong>速度</strong>：利用 Rust 的高性能进行构建</li><li><strong>兼容性</strong>：能够与现有的 Rollup 插件一起工作</li><li><strong>优化</strong>：拥有比 esbuild 和 Rollup 更先进的特性</li></ul><h2 id="why-vite-is-migrating-to-rolldown" tabindex="-1">为什么 Vite 要迁移到 Rolldown <a class="header-anchor" href="#why-vite-is-migrating-to-rolldown" aria-label="Permalink to “为什么 Vite 要迁移到 Rolldown”">​</a></h2><ol><li><p><strong>统一</strong>：Vite 目前使用 esbuild 进行依赖预打包，使用 Rollup 进行生产构建。Rolldown 的目标是将这两个过程统一到一个高性能的打包工具中，以降低复杂性。</p></li><li><p><strong>性能</strong>：Rolldown 的 Rust 实现在性能上比基于 JavaScript 的打包工具有显著的提升。虽然具体的基准测试可能会因项目大小和复杂性而有所不同，但早期测试表明，与 Rollup 相比，Rolldown 的速度有望得到提高。</p></li><li><p><strong>额外特性</strong>：Rolldown 提供了 Rollup 或 esbuild 中没有的功能，例如高级的分块控制，内置的模块热替换（HMR），以及模块联邦（Module Federation）。</p></li></ol><p>欲深入了解 Rolldown 的设计动机，请参阅<a href="https://rolldown.rs/guide/introduction#why-rolldown" target="_blank" rel="noreferrer">构建 Rolldown 的原因</a>。</p><h2 id="benefits-of-trying-rolldown-vite" tabindex="-1">尝试 <code>rolldown-vite</code> 的好处 <a class="header-anchor" href="#benefits-of-trying-rolldown-vite" aria-label="Permalink to “尝试 rolldown-vite 的好处”">​</a></h2><ul><li>对于大型项目，可以显著提升构建速度</li><li>提供有价值的反馈，参与塑造 Vite 的未来打包体验</li><li>为最终的官方 Rolldown 集成做好准备</li></ul><h2 id="how-to-try-rolldown" tabindex="-1">如何尝试 Rolldown <a class="header-anchor" href="#how-to-try-rolldown" aria-label="Permalink to “如何尝试 Rolldown”">​</a></h2><p>基于 Rolldown 驱动的 Vite 目前以名为 <code>rolldown-vite</code> 的独立包提供。如果你的项目中直接依赖了 <code>vite</code>，可以在项目的 <code>package.json</code>文件里将 <code>vite</code> 包设置别名指向 <code>rolldown-vite</code>，这样就能实现无缝替换。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line diff remove"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^7.0.0&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vite&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">请固定版本!</p><p>虽然这些示例使用了 <code>@latest</code>，但我们建议使用特定的版本号，以避免意外的重大更改，因为 <a href="#versioning-policy"><code>rolldown-vite</code> 被认为是实验性的</a>。</p></div><p>如果你使用了 Vitepress 或其他以 Vite 作为同等依赖（peer dependency）的元框架，你需要在 <code>package.json</code> 文件中覆盖 <code>vite</code> 依赖，具体操作方式会因你使用的包管理器而略有不同。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-92" id="tab-93" checked><label data-title="npm" for="tab-93">npm</label><input type="radio" name="group-92" id="tab-94"><label data-title="Yarn" for="tab-94">Yarn</label><input type="radio" name="group-92" id="tab-95"><label data-title="pnpm" for="tab-95">pnpm</label><input type="radio" name="group-92" id="tab-96"><label data-title="Bun" for="tab-96">Bun</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resolutions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm:rolldown-vite@latest&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>在添加 overrides 之后，重新安装你的依赖并像往常一样启动你的开发服务器或构建你的项目即可，无需进一步的配置更改。</p><p>如果你正在启动一个新项目，你也可以像平常一样使用 <code>create-vite</code> 来创建 rolldown-vite 项目。最新版本会询问你是否要使用 <code>rolldown-vite</code>。</p><h2 id="known-limitations" tabindex="-1">已知限制 <a class="header-anchor" href="#known-limitations" aria-label="Permalink to “已知限制”">​</a></h2><p>虽然 Rolldown 的目标是成为 Rollup 的替代品，但还有一些特性正在实现中，以及一些小的有意的行为差异。需要查看完整的列表，请参考 <a href="https://github.com/vitejs/rolldown-vite/pull/84#issue-2903144667" target="_blank" rel="noreferrer">这个 GitHub PR</a>，它会定期更新。</p><h3 id="option-validation-warnings" tabindex="-1">验证选项警告 <a class="header-anchor" href="#option-validation-warnings" aria-label="Permalink to “验证选项警告”">​</a></h3><p>当传入未知或无效选项时，Rolldown 会输出警告。由于 Rolldown 不支持 Rollup 中的部分选项，根据您或所使用的元框架设置的选项，可能会遇到相关警告。下方展示了此类警告消息的示例：</p><blockquote><p>Warning validate output options.</p><ul><li>For the &quot;generatedCode&quot;. Invalid key: Expected never but received &quot;generatedCode&quot;.</li></ul></blockquote><p>如果你自己没有传递这个选项，这个问题必须由使用的框架来解决。</p><h3 id="api-differences" tabindex="-1">API 差异 <a class="header-anchor" href="#api-differences" aria-label="Permalink to “API 差异”">​</a></h3><h4 id="manualchunks-changed-to-advancedchunks" tabindex="-1"><code>manualChunks</code> 改为 <code>advancedChunks</code> <a class="header-anchor" href="#manualchunks-changed-to-advancedchunks" aria-label="Permalink to “manualChunks 改为 advancedChunks”">​</a></h4><p>虽然 Rolldown 支持与 Rollup 相同的 <code>manualChunks</code> 选项，但该选项已被标记为过时。作为替代，Rolldown 通过 <a href="https://rolldown.rs/guide/in-depth/advanced-chunks#advanced-chunks" target="_blank" rel="noreferrer"><code>advancedChunks</code> 选项</a> 提供更精细的设置，该选项与 webpack 的 <code>splitChunk</code> 功能更为相似：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 旧配置 (Rollup)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      output: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        manualChunks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">react(?:-dom)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vendor&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新配置 (Rolldown)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        advancedChunks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          groups: [{ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vendor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">react(?:-dom)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="performance" tabindex="-1">性能 <a class="header-anchor" href="#performance" aria-label="Permalink to “性能”">​</a></h2><p><code>rolldown-vite</code> 主要致力于确保与现有生态系统的兼容性，因此其默认配置旨在实现平滑过渡。如果你切换到更快的基于 Rust 的内部插件或进行其他自定义配置，还可以获得进一步的性能提升。</p><h2 id="enabling-native-plugins" tabindex="-1">启用原生插件 <a class="header-anchor" href="#enabling-native-plugins" aria-label="Permalink to “启用原生插件”">​</a></h2><p>得益于 Rolldown 和 Oxc 的支持，各种 Vite 内部插件（例如 alias 或 resolve 插件）已转换为 Rust 语言。原生插件现在默认启用，默认值设置为 <code>&#39;v1&#39;</code>。</p><p>如果您遇到任何问题，可以将 Vite 配置中的 <code>experimental.enableNativePlugin</code> 选项更改为 <code>&#39;resolver&#39;</code> 或 <code>false</code> 以解决问题。请注意，此选项将来会被移除。</p><h3 id="utilizing-oxc-s-react-refresh-transform" tabindex="-1">利用 Oxc 的 React 刷新转换 <a class="header-anchor" href="#utilizing-oxc-s-react-refresh-transform" aria-label="Permalink to “利用 Oxc 的 React 刷新转换”">​</a></h3><p><code>@vitejs/plugin-react</code> v5.0.0+ 版本使用 Oxc 的 React 刷新转换功能。如果你没有使用任何 Babel 插件（包括 React 编译器），现在整个转换过程将由 Oxc 完成，除了更新 <code>@vitejs/plugin-react</code> 外无需任何其他更改，就能提升构建性能。</p><p>如果你在使用 <code>@vitejs/plugin-react-swc</code> 时没有使用 SWC 插件和自定义 SWC 选项，你可以切换到 <code>@vitejs/plugin-react</code> 插件来利用 Oxc。</p><details class="details custom-block"><summary><code>@vitejs/plugin-react-oxc</code> 插件已被弃用</summary><p>此前，我们建议使用 <code>@vitejs/plugin-react-oxc</code> 来利用 Oxc 的 React 刷新转换功能。但是，我们已经将该实现合并到了 <code>@vitejs/plugin-react</code> 中，这样可以更轻松地切换到 <code>rolldown-vite</code>。<code>@vitejs/plugin-react-oxc</code> 现在已被弃用，将不再更新。</p></details><h3 id="withfilter-wrapper" tabindex="-1"><code>withFilter</code> 包装器 <a class="header-anchor" href="#withfilter-wrapper" aria-label="Permalink to “withFilter 包装器”">​</a></h3><p>插件作者可以选择使用 <a href="https://rolldown.rs/apis/plugin-hook-filters" target="_blank" rel="noreferrer">钩子过滤功能</a>，以减少 Rust 和 JavaScript 运行时之间的通信开销。 但如果你使用的某些插件还未采用该功能，而你又希望受益于它，可以使用 <code>withFilter</code> 包装器自行为插件添加过滤条件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在你的 vite.config.ts 中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withFilter, defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> svgr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-svgr&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 仅对以 \`.svg?react\` 结尾的文件加载 \`svgr\` 插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      svgr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /*...*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { load: { id:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">svg</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">react</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="reporting-issues" tabindex="-1">反馈问题 <a class="header-anchor" href="#reporting-issues" aria-label="Permalink to “反馈问题”">​</a></h2><p>由于这是一个实验性的集成，你可能会遇到一些问题。如果你遇到问题，请在 <a href="https://github.com/vitejs/rolldown-vite" target="_blank" rel="noreferrer"><code>vitejs/rolldown-vite</code></a> 仓库中反馈，<strong>而不是主 Vite 仓库</strong>。</p><p>在 <a href="https://github.com/vitejs/rolldown-vite/issues/new" target="_blank" rel="noreferrer">上报问题</a> 时，请根据相应的问题模板进行操作，并提供模板中所需的信息，这通常包括：</p><ul><li>问题的最小复现</li><li>你的环境详细信息（操作系统，Node 版本，包管理器）</li><li>任何相关的错误信息或日志</li></ul><p>如果你想进行实时讨论和故障排除，请确保加入 <a href="https://chat.rolldown.rs/" target="_blank" rel="noreferrer">Rolldown Discord</a>。</p><h2 id="versioning-policy" tabindex="-1">版本管理策略 <a class="header-anchor" href="#versioning-policy" aria-label="Permalink to “版本管理策略”">​</a></h2><p><code>rolldown-vite</code> 的版本管理策略与普通 Vite 包保持主版本号和次版本号的一致。这种同步确保了在某个特定的 Vite 次版本发布中包含的功能，也会出现在对应的 <code>rolldown-vite</code> 次版本发布中。但需要注意的是，补丁版本在两个项目之间并不同步。如果你想确认普通 Vite 包的某个具体变更是否已经包含在 <code>rolldown-vite</code> 中，可以随时查阅 <a href="https://github.com/vitejs/rolldown-vite/blob/rolldown-vite/packages/vite/CHANGELOG.md" target="_blank" rel="noreferrer"><code>rolldown-vite</code> 独立的更新日志</a> 以确认。</p><p>此外，请注意，<code>rolldown-vite</code> 本身仍处于实验阶段。由于其实验性质，即使在补丁版本中也可能引入破坏性变更。另外，<code>rolldown-vite</code> 仅对其最新的次版本进行更新。即使是重要的安全问题或 bug 修复，也不会为较早的主版本或次版本发布补丁。</p><h2 id="future-plans" tabindex="-1">未来计划 <a class="header-anchor" href="#future-plans" aria-label="Permalink to “未来计划”">​</a></h2><p><code>rolldown-vite</code> 包是一个临时的解决方案，用于收集反馈和稳定 Rolldown 的集成。在未来，这个功能将被合并回主 Vite 仓库。</p><p>我们鼓励你尝试 <code>rolldown-vite</code> 并通过反馈和问题报告来参与其开发工作。</p><p>未来我们将为 Vite 引入全量打包模式（Full Bundle Mode），该模式将在生产环境 <em>和开发模式</em> 下提供打包后的文件。</p><h3 id="why-introducing-full-bundle-mode" tabindex="-1">为何引入全量打包模式？ <a class="header-anchor" href="#why-introducing-full-bundle-mode" aria-label="Permalink to “为何引入全量打包模式？”">​</a></h3><p>Vite 以其非打包开发服务器方案著称，这正是其早期凭借速度优势迅速流行的关键原因。这种方案最初是尝试探索在不进行传统打包的情况下，开发服务器性能能达到何种极限。</p><p>但随着项目规模和复杂度的增长，两大挑战逐渐显现：</p><ol><li><p><strong>开发/生产环境不一致性</strong>：开发环境提供的非打包 JavaScript 与生产环境打包构建产物存在运行时行为差异，可能导致仅在生产环境暴露的问题，增加调试难度。</p></li><li><p><strong>开发阶段性能衰减</strong>：非打包方案导致每个模块需单独请求，产生大量网络请求。虽然 <em>对生产环境无影响</em>，但会造成开发服务器启动和页面刷新时的显著开销。在大型应用中（需处理数百甚至数千独立请求）该问题尤为突出，若开发者使用网络代理，刷新延迟和开发体验下降将更加严重。</p></li></ol><p>通过 Rolldown 的整合，我们有机会在保持 Vite 标志性性能的同时统一开发与生产体验。全量打包模式将实现：</p><ul><li>大型应用仍保持快速启动</li><li>开发与生产环境行为一致性</li><li>降低页面刷新的网络开销</li><li>在 ESM 输出基础上维持高效 HMR</li></ul><p>该模式初期将作为可选特性提供（类似 Rolldown 整合方案），我们计划在收集反馈并确保稳定性后将其设为默认模式。</p><h2 id="plugin-framework-authors-guide" tabindex="-1">插件 / 框架作者指南 <a class="header-anchor" href="#plugin-framework-authors-guide" aria-label="Permalink to “插件 / 框架作者指南”">​</a></h2><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>这部分内容主要是针对插件和框架的开发者。如果你是一般用户，你可以忽略这部分内容。</p></div><h3 id="overview-of-major-changes" tabindex="-1">主要变更概述 <a class="header-anchor" href="#overview-of-major-changes" aria-label="Permalink to “主要变更概述”">​</a></h3><ul><li>Rolldown 用于构建（之前使用 Rollup）</li><li>Rolldown 用于 optimizer（之前使用 esbuild）</li><li>Rolldown 处理 CommonJS 支持（之前使用 @rollup/plugin-commonjs）</li><li>Oxc 用于语法降级（之前使用 esbuild）</li><li>Lightning CSS 默认用于 CSS 压缩（之前使用 esbuild）</li><li>Oxc minifier 默认用于 JS 压缩（之前使用 esbuild）</li><li>Rolldown 用于打包配置（之前使用 esbuild）</li></ul><h3 id="detecting-rolldown-vite" tabindex="-1">检测 <code>rolldown-vite</code> <a class="header-anchor" href="#detecting-rolldown-vite" aria-label="Permalink to “检测 rolldown-vite”">​</a></h3><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>在大多数情况下，你不需要检测你的插件是运行在 <code>rolldown-vite</code> 还是 <code>vite</code> 上，你应该在两者之间寻求一致的行为，而不是采用条件分支。</p></div><p>如果你需要 <code>rolldown-vite</code> 有不同的行为，你有两种方法可以检测是否使用了 <code>rolldown-vite</code>：</p><p>检查 <code>this.meta.rolldownVersion</code> 的存在：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolveId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.meta.rolldownVersion) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // rolldown-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // rollup-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>自 Vite 7.0.0 起，<code>this.meta</code> 在所有钩子中都可用。在此版本之前，<code>this.meta</code> 在 Vite 特有的钩子（如 <code>config</code> 钩子）中不可用。</p></div><br><p>检查 <code>rolldownVersion</code> export 的存在：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vite.rolldownVersion) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // rolldown-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // rollup-vite 的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你将 <code>vite</code> 作为依赖项（dependency），而不是同等依赖（peer dependency），那么 <code>rolldownVersion</code> export 非常有用，因为它可以在你代码的任何地方使用。</p><h3 id="ignoring-option-validation-in-rolldown" tabindex="-1">在 Rolldown 中忽略选项验证 <a class="header-anchor" href="#ignoring-option-validation-in-rolldown" aria-label="Permalink to “在 Rolldown 中忽略选项验证”">​</a></h3><p>如 <a href="#option-validation-errors">前文所述</a>，当传入未知或无效选项时，Rolldown 会输出警告。</p><p>可通过条件式传递选项（通过 <a href="#detecting-rolldown-vite">如上所示</a> 检测是否使用 <code>rolldown-vite</code>）来修复此问题。</p><h3 id="transformwithesbuild-requires-installing-esbuild-separately" tabindex="-1"><code>transformWithEsbuild</code> 需要单独安装 <code>esbuild</code> <a class="header-anchor" href="#transformwithesbuild-requires-installing-esbuild-separately" aria-label="Permalink to “transformWithEsbuild 需要单独安装 esbuild”">​</a></h3><p>由于 Vite 本身已不再使用 <code>esbuild</code>，<code>esbuild</code> 现在被作为可选的 peer dependency。如果你的插件使用了 <code>transformWithEsbuild</code>，则需要将 <code>esbuild</code> 添加到插件的依赖中，或者由用户手动安装。</p><p>推荐的迁移方式是使用新导出的 <code>transformWithOxc</code> 函数，它采用 Oxc 而不是 <code>esbuild</code> 来完成相应任务。</p><h3 id="compatibility-layer-for-esbuild-options" tabindex="-1"><code>esbuild</code> 选项的兼容层 <a class="header-anchor" href="#compatibility-layer-for-esbuild-options" aria-label="Permalink to “esbuild 选项的兼容层”">​</a></h3><p>Rolldown-Vite 有一个兼容层，用于将 <code>esbuild</code> 的选项转换为相应的 Oxc 或 <code>rolldown</code> 选项。正如 <a href="https://github.com/vitejs/vite-ecosystem-ci/blob/rolldown-vite/README-temp.md" target="_blank" rel="noreferrer">生态系统 CI</a> 中测试的那样，这在许多情况，包括简单的 <code>esbuild</code> 插件下都有效。 虽说如此，但 <strong>我们将在未来移除对 <code>esbuild</code> 选项的支持</strong>，并鼓励你尝试使用相应的 Oxc 或 <code>rolldown</code> 选项。 你可以从 <code>configResolved</code> 钩子获取由兼容层设置的选项。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;log-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  configResolved</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;options&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config.optimizeDeps, config.oxc)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h3 id="hook-filter-feature" tabindex="-1">钩子过滤功能 <a class="header-anchor" href="#hook-filter-feature" aria-label="Permalink to “钩子过滤功能”">​</a></h3><p>Rolldown 引入了<a href="https://rolldown.rs/apis/plugin-hook-filters" target="_blank" rel="noreferrer">钩子过滤功能</a>，以减少 Rust 和 JavaScript 运行时之间的通信开销。此功能允许插件指定确定何时调用钩子的模式，从而通过避免不必要的钩子调用来提高性能。</p><p>请参阅 <a href="/guide/api-plugin.html#hook-filters">Hook Filters 指南</a> 了解更多信息。</p><h3 id="converting-content-to-javascript-in-load-or-transform-hooks" tabindex="-1">在 <code>load</code> 或 <code>transform</code> 钩子中将内容转换为 JavaScript <a class="header-anchor" href="#converting-content-to-javascript-in-load-or-transform-hooks" aria-label="Permalink to “在 load 或 transform 钩子中将内容转换为 JavaScript”">​</a></h3><p>如果你在 <code>load</code> 或 <code>transform</code> 钩子中将内容转换为 JavaScript，你可能需要添加 <code>moduleType: &#39;js&#39;</code> 到返回值中。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> plugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;txt-loader&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        code: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`export default \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是因为 <a href="https://rolldown.rs/guide/in-depth/module-types" target="_blank" rel="noreferrer">Rolldown 支持非 JavaScript 模块</a> 并且除非指定，否则从扩展名推断模块类型。</p>`,88))])}const F=n(d,[["render",k]]);export{b as __pageData,F as default};
