import{_ as s,c as i,o as a,aq as n}from"./chunks/framework.CYFbgU53.js";const k=JSON.parse('{"title":"迁移到基于环境的API","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/changes/per-environment-apis"}],["meta",{"property":"og:title","content":"迁移到基于环境的API"}]]},"headers":[],"relativePath":"changes/per-environment-apis.md","filePath":"changes/per-environment-apis.md"}'),r={name:"changes/per-environment-apis.md"};function t(o,e,l,d,p,h){return a(),i("div",null,[...e[0]||(e[0]=[n(`<h1 id="move-to-per-environment-apis" tabindex="-1">迁移到基于环境的API <a class="header-anchor" href="#move-to-per-environment-apis" aria-label="Permalink to “迁移到基于环境的API”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">反馈</p><p>可以在 <a href="https://github.com/vitejs/vite/discussions/16358" target="_blank" rel="noreferrer">环境 API 讨论</a> 中向我们提供反馈</p></div><p><code>ViteDevServer</code> 中与 module graph 和 modules transforms 相关的多个 API 已移至 <code>DevEnvironment</code> 实例。</p><p>影响范围：<code>Vite 插件作者</code></p><div class="warning custom-block"><p class="custom-block-title">即将废弃</p><p><code>环境</code>实例首次在 <code>v6.0</code> 中引入。计划在未来的 major 版本中废弃现在的 <code>server.moduleGraph</code> 和其他方法。我们不建议你现在就放弃 server 方法。要识别你的使用情况，请在你的 vite 配置中设置以下。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerModuleGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerReloadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerPluginContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerHot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerTransformRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  removeServerWarmupRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="motivation" tabindex="-1">动机 <a class="header-anchor" href="#motivation" aria-label="Permalink to “动机”">​</a></h2><p>在 Vite v5 及之前的版本中，一个 Vite 开发服务器总是有两个环境（<code>client</code> 和 <code>ssr</code>）。<code>server.moduleGraph</code> 混合了来自这两个环境的模块。节点通过 <code>clientImportedModules</code> 和 <code>ssrImportedModules</code> 列表连接（但每种环境只维护一个 <code>importers</code> 列表）。转换后的模块由一个 <code>id</code> 和一个 <code>ssr</code> 布尔值表示。该布尔值需要传递给 API，例如 <code>server.moduleGraph.getModuleByUrl(url, ssr)</code> 和 <code>server.transformRequest(url, { ssr })</code>。</p><p>在 Vite v6 中，现在可以创建任意数量的自定义环境（<code>client</code>, <code>ssr</code>, <code>edge</code>等）。单一的 <code>ssr</code> 布尔值已经不够用了。我们没有将 API 改为 <code>server.transformRequest(url, { environment })</code>，而是将这些方法移到了环境实例中，这样就可以在没有 Vite dev 服务器的情况下调用这些方法。</p><h2 id="migration-guide" tabindex="-1">迁移指南 <a class="header-anchor" href="#migration-guide" aria-label="Permalink to “迁移指南”">​</a></h2><ul><li><code>server.moduleGraph</code> -&gt; <a href="/guide/api-environment-instances.html#separate-module-graphs"><code>environment.moduleGraph</code></a></li><li><code>server.reloadModule(module)</code> -&gt; <code>environment.reloadModule(module)</code></li><li><code>server.pluginContainer</code> -&gt; <code>environment.pluginContainer</code></li><li><code>server.transformRequest(url, ssr)</code> -&gt; <code>environment.transformRequest(url)</code></li><li><code>server.warmupRequest(url, ssr)</code> -&gt; <code>environment.warmupRequest(url)</code></li><li><code>server.hot</code> -&gt; <code>server.client.environment.hot</code></li></ul>`,10)])])}const m=s(r,[["render",t]]);export{k as __pageData,m as default};
