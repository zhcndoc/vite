import{_ as r,c as s,o,aq as i}from"./chunks/framework.CYFbgU53.js";const g=JSON.parse('{"title":"预览选项","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/config/preview-options"}],["meta",{"property":"og:title","content":"预览选项"}]]},"headers":[],"relativePath":"config/preview-options.md","filePath":"config/preview-options.md"}'),t={name:"config/preview-options.md"};function a(p,e,n,l,h,d){return o(),s("div",null,[...e[0]||(e[0]=[i(`<h1 id="preview-options" tabindex="-1">预览选项 <a class="header-anchor" href="#preview-options" aria-label="Permalink to “预览选项”">​</a></h1><p>除非另有说明，本节中的选项仅适用于预览。</p><h2 id="preview-host" tabindex="-1">preview.host <a class="header-anchor" href="#preview-host" aria-label="Permalink to “preview.host”">​</a></h2><ul><li><strong>类型：</strong> <code>string | boolean</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-host"><code>server.host</code></a></li></ul><p>为开发服务器指定 ip 地址。 设置为 <code>0.0.0.0</code> 或 <code>true</code> 会监听所有地址，包括局域网和公共地址。</p><p>还可以通过 CLI 进行设置，使用 <code>--host 0.0.0.0</code> 或 <code>--host</code>。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>在某些情况下，可能响应的是其他服务器而不是 Vite。 查看 <a href="./server-options.html#server-host"><code>server.host</code></a> 了解更多细节。</p></div><h2 id="preview-allowedhosts" tabindex="-1">preview.allowedHosts <a class="header-anchor" href="#preview-allowedhosts" aria-label="Permalink to “preview.allowedHosts”">​</a></h2><ul><li><strong>类型：</strong> <code>string[] | true</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-allowedhosts"><code>server.allowedHosts</code></a></li></ul><p>Vite 允许响应的主机名。</p><p>查看 <a href="./server-options.html#server-allowedhosts"><code>server.allowedHosts</code></a> 以获取更多详细信息。</p><h2 id="preview-port" tabindex="-1">preview.port <a class="header-anchor" href="#preview-port" aria-label="Permalink to “preview.port”">​</a></h2><ul><li><strong>类型：</strong> <code>number</code></li><li><strong>默认：</strong> <code>4173</code></li></ul><p>指定开发服务器端口。注意，如果设置的端口已被使用，Vite 将自动尝试下一个可用端口，所以这可能不是最终监听的服务器端口。</p><p><strong>示例：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3030</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preview: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="preview-strictport" tabindex="-1">preview.strictPort <a class="header-anchor" href="#preview-strictport" aria-label="Permalink to “preview.strictPort”">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-strictport"><code>server.strictPort</code></a></li></ul><p>设置为 <code>true</code> 时，如果端口已被使用，则直接退出，而不会再进行后续端口的尝试。</p><h2 id="preview-https" tabindex="-1">preview.https <a class="header-anchor" href="#preview-https" aria-label="Permalink to “preview.https”">​</a></h2><ul><li><strong>类型：</strong> <code>https.ServerOptions</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-https"><code>server.https</code></a></li></ul><p>启用 TLS + HTTP/2。</p><p>有关更多详细信息，请参阅 <a href="./server-options.html#server-https"><code>server.https</code></a>。</p><h2 id="preview-open" tabindex="-1">preview.open <a class="header-anchor" href="#preview-open" aria-label="Permalink to “preview.open”">​</a></h2><ul><li><strong>类型：</strong> <code>boolean | string</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-open"><code>server.open</code></a></li></ul><p>开发服务器启动时，自动在浏览器中打开应用程序。当该值为字符串时，它将被用作 URL 的路径名。如果你想在你喜欢的某个浏览器打开该开发服务器，你可以设置环境变量 <code>process.env.BROWSER</code> （例如 <code>firefox</code>）。欲了解更多细节，请参阅 <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noreferrer"><code>open</code> 包的源码</a>。</p><p><code>BROWSER</code> 和 <code>BROWSER_ARGS</code> 是两个特殊的环境变量，你可以在 <code>.env</code> 文件中设置它们用以配置本选项。查看 <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noreferrer"><code>open</code> 这个包</a> 了解更多详情。</p><h2 id="preview-proxy" tabindex="-1">preview.proxy <a class="header-anchor" href="#preview-proxy" aria-label="Permalink to “preview.proxy”">​</a></h2><ul><li><strong>类型：</strong> <code>Record&lt;string, string | ProxyOptions&gt;</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-proxy"><code>server.proxy</code></a></li></ul><p>为开发服务器配置自定义代理规则。其值的结构为 <code>{ key: options }</code> 的对象。如果 key 以 <code>^</code> 开头，它将被识别为 <code>RegExp</code>，其中 <code>configure</code> 选项可用于访问代理实例。</p><p>基于 <a href="https://github.com/sagemathinc/http-proxy-3" target="_blank" rel="noreferrer"><code>http-proxy-3</code></a> 实现，完整的参数列表参见 <a href="https://github.com/sagemathinc/http-proxy-3#options" target="_blank" rel="noreferrer">此链接</a>。</p><h2 id="preview-cors" tabindex="-1">preview.cors <a class="header-anchor" href="#preview-cors" aria-label="Permalink to “preview.cors”">​</a></h2><ul><li><strong>类型：</strong> <code>boolean | CorsOptions</code></li><li><strong>默认：</strong> <a href="./server-options.html#server-cors"><code>server.cors</code></a></li></ul><p>为预览服务器配置 CORS。</p><p>请查看 <a href="./server-options.html#server-cors"><code>server.cors</code></a> 了解更多细节。</p><h2 id="preview-headers" tabindex="-1">preview.headers <a class="header-anchor" href="#preview-headers" aria-label="Permalink to “preview.headers”">​</a></h2><ul><li><strong>类型：</strong> <code>OutgoingHttpHeaders</code></li></ul><p>指明服务器返回的响应头。</p>`,38)])])}const v=r(t,[["render",a]]);export{g as __pageData,v as default};
