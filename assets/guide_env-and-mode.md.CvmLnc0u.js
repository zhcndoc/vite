import{_ as s,c as i,o as t,aq as a}from"./chunks/framework.CYFbgU53.js";const k=JSON.parse('{"title":"环境变量和模式","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/guide/env-and-mode"}],["meta",{"property":"og:title","content":"环境变量和模式"}]]},"headers":[],"relativePath":"guide/env-and-mode.md","filePath":"guide/env-and-mode.md"}'),n={name:"guide/env-and-mode.md"};function d(l,e,o,p,c,h){return t(),i("div",null,[...e[0]||(e[0]=[a(`<h1 id="env-variables-and-modes" tabindex="-1">环境变量和模式 <a class="header-anchor" href="#env-variables-and-modes" aria-label="Permalink to “环境变量和模式”">​</a></h1><p>Vite 在特殊的 <code>import.meta.env</code> 对象下暴露了一些常量。这些常量在开发阶段被定义为全局变量，并在构建阶段被静态替换，以使树摇（tree-shaking）更有效。</p><details class="details custom-block"><summary>Example</summary><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DEV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这里的代码在生产构建中会被 tree-shaking 优化掉</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Dev mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><h2 id="built-in-constants" tabindex="-1">内置常量 <a class="header-anchor" href="#built-in-constants" aria-label="Permalink to “内置常量”">​</a></h2><p>一些内置常量在所有情况下都可用：</p><ul><li><p><strong><code>import.meta.env.MODE</code></strong>: {string} 应用运行的<a href="#modes">模式</a>。</p></li><li><p><strong><code>import.meta.env.BASE_URL</code></strong>: {string} 部署应用时的基本 URL。他由<a href="/config/shared-options.html#base"><code>base</code> 配置项</a>决定。</p></li><li><p><strong><code>import.meta.env.PROD</code></strong>: {boolean} 应用是否运行在生产环境（使用 <code>NODE_ENV=&#39;production&#39;</code> 运行开发服务器或构建应用时使用 <code>NODE_ENV=&#39;production&#39;</code> ）。</p></li><li><p><strong><code>import.meta.env.DEV</code></strong>: {boolean} 应用是否运行在开发环境 (永远与 <code>import.meta.env.PROD</code>相反)。</p></li><li><p><strong><code>import.meta.env.SSR</code></strong>: {boolean} 应用是否运行在 <a href="./ssr.html#conditional-logic">server</a> 上。</p></li></ul><h2 id="env-variables" tabindex="-1">环境变量 <a class="header-anchor" href="#env-variables" aria-label="Permalink to “环境变量”">​</a></h2><p>Vite 自动将环境变量暴露在 <code>import.meta.env</code> 对象下，作为字符串。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env">.env</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>VITE_SOME_KEY=123</span></span>
<span class="line"><span>DB_PASSWORD=foobar</span></span></code></pre></div></div><p>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>import.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_SOME_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DB_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p>如果你想要自定义环境变量的前缀，请参阅 <a href="/config/shared-options.html#envprefix">envPrefix</a> 选项。</p><div class="tip custom-block"><p class="custom-block-title">环境变量解析</p><p>如上所示，<code>VITE_SOME_KEY</code> 是一个数字，但在解析时会返回一个字符串。布尔类型的环境变量也会发生同样的情况。在代码中使用时，请确保转换为所需的类型。</p></div><h3 id="env-files" tabindex="-1"><code>.env</code> 文件 <a class="header-anchor" href="#env-files" aria-label="Permalink to “.env 文件”">​</a></h3><p>Vite 使用 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv</a> 从你的 <a href="/config/shared-options.html#envdir">环境目录</a> 中的下列文件加载额外的环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>.env                # 所有情况下都会加载</span></span>
<span class="line"><span>.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span>.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span>.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">环境加载优先级</p><p>一份用于指定模式的文件（例如 <code>.env.production</code>）会比通用文件的优先级更高（例如 <code>.env</code>）。</p><p>Vite 总是会加载 <code>.env</code> 和 <code>.env.local</code> 文件，除此之外还会加载模式特定的 <code>.env.[mode]</code> 文件。在模式特定文件中声明的变量优先级高于通用文件中的变量，但仅在 <code>.env</code> 或 <code>.env.local</code> 中定义的变量仍然可以在环境中使用。</p><p>另外，Vite 执行时已经存在的环境变量有最高的优先级，不会被 <code>.env</code> 类文件覆盖。例如当运行 <code>VITE_SOME_KEY=123 vite build</code> 的时候。</p><p><code>.env</code> 类文件会在 Vite 启动一开始时被加载，而改动会在重启服务器后生效。</p></div><p>此外，Vite 使用 <a href="https://github.com/motdotla/dotenv-expand" target="_blank" rel="noreferrer">dotenv-expand</a> 来扩展在 env 文件中编写的变量。想要了解更多相关语法，请查看 <a href="https://github.com/motdotla/dotenv-expand#what-rules-does-the-expansion-engine-follow" target="_blank" rel="noreferrer">它们的文档</a>。</p><p>请注意，如果想要在环境变量中使用 <code>$</code> 符号，则必须使用 <code>\\</code> 对其进行转义。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env">.env</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>KEY=123</span></span>
<span class="line"><span>NEW_KEY1=test$foo   # test</span></span>
<span class="line"><span>NEW_KEY2=test\\$foo  # test$foo</span></span>
<span class="line"><span>NEW_KEY3=test$KEY   # test123</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">安全注意事项</p><ul><li><p><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 git 检入。</p></li><li><p>由于任何暴露给 Vite 源码的变量最终都将出现在客户端包中，<code>VITE_*</code> 变量应该不包含任何敏感信息。</p></li></ul></div><details class="details custom-block"><summary>反向扩展变量</summary><p>Vite 支持以相反的顺序扩展变量。 例如，下面的 <code>.env</code> 将被评估为 <code>VITE_FOO=foobar</code>, <code>VITE_BAR=bar</code>。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env">.env</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>VITE_FOO=foo\${VITE_BAR}</span></span>
<span class="line"><span>VITE_BAR=bar</span></span></code></pre></div></div><p>这在 shell 脚本和其他工具（如 <code>docker-compose</code>）中不起作用。 不过，Vite 支持这种行为，因为 <code>dotenv-expand</code> 已经支持这种行为很长时间了，JavaScript 生态系统中的其他工具也使用支持这种行为的旧版本。</p><p>为避免出现互操作问题，建议避免依赖这种行为。今后，Vite 可能会对这种行为发出警告。</p></details><h2 id="intellisense" tabindex="-1">TypeScript 的智能提示 <a class="header-anchor" href="#intellisense" aria-label="Permalink to “TypeScript 的智能提示”">​</a></h2><p>默认情况下，Vite 在 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/client.d.ts" target="_blank" rel="noreferrer"><code>vite/client.d.ts</code></a> 中为 <code>import.meta.env</code> 提供了类型定义。随着在 <code>.env[mode]</code> 文件中自定义了越来越多的环境变量，你可能想要在代码中获取这些以 <code>VITE_</code> 为前缀的用户自定义环境变量的 TypeScript 智能提示。</p><p>要想做到这一点，你可以在 <code>src</code> 目录下创建一个 <code>vite-env.d.ts</code> 文件，接着按下面这样增加 <code>ImportMetaEnv</code> 的定义：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vite-env.d.ts">vite-env.d.ts</span></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViteTypeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加这行代码，你就可以将 ImportMetaEnv 的类型设为严格模式，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这样就不允许有未知的键值了。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // strictImportMetaEnv: unknown</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImportMetaEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> VITE_APP_TITLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 更多环境变量...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImportMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImportMetaEnv</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>如果你的代码依赖于浏览器环境的类型，比如 <a href="https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts" target="_blank" rel="noreferrer">DOM</a> 和 <a href="https://github.com/microsoft/TypeScript/blob/main/src/lib/webworker.generated.d.ts" target="_blank" rel="noreferrer">WebWorker</a>，你可以在 <code>tsconfig.json</code> 中修改 <a href="https://www.typescriptlang.org/tsconfig#lib" target="_blank" rel="noreferrer">lib</a> 字段来获取类型支持。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="tsconfig.json">tsconfig.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WebWorker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">导入语句会破坏类型增强</p><p>如果 <code>ImportMetaEnv</code> 增强不起作用，请确保在 <code>vite-env.d.ts</code> 中没有任何 <code>import</code> 语句。更多信息请参阅 <a href="https://www.typescriptlang.org/docs/handbook/2/modules.html#how-javascript-modules-are-defined" target="_blank" rel="noreferrer">TypeScript 文档</a>。</p></div><h2 id="html-constant-replacement" tabindex="-1">HTML 环境变量替换 <a class="header-anchor" href="#html-constant-replacement" aria-label="Permalink to “HTML 环境变量替换”">​</a></h2><p>Vite 还支持在 HTML 文件中替换环境变量。<code>import.meta.env</code> 中的任何属性都可以通过特殊的 <code>%CONST_NAME%</code> 语法在 HTML 文件中使用：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Vite is running in %MODE%&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Using data from %VITE_API_URL%&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果环境变量在 <code>import.meta.env</code> 中不存在，比如不存在的 <code>%NON_EXISTENT%</code>，则会将被忽略而不被替换，这与 JS 中的 <code>import.meta.env.NON_EXISTENT</code> 不同，JS 中会被替换为 <code>undefined</code>。</p><p>正因为 Vite 被许多框架使用，它在复杂的替换（如条件替换）上故意不持任何意见。Vite 可以使用 <a href="https://github.com/vitejs/awesome-vite#transformers" target="_blank" rel="noreferrer">现有的用户插件</a> 或者一个实现了 <a href="./api-plugin.html#transformindexhtml"><code>transformIndexHtml</code> 钩子</a> 的自定义插件来扩展。</p><h2 id="modes" tabindex="-1">模式 <a class="header-anchor" href="#modes" aria-label="Permalink to “模式”">​</a></h2><p>默认情况下，开发服务器 (<code>dev</code> 命令) 运行在 <code>development</code> (开发) 模式，而 <code>build</code> 命令则运行在 <code>production</code> (生产) 模式。</p><p>这意味着当执行 <code>vite build</code> 时，它会自动加载 <code>.env.production</code> 中可能存在的环境变量：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env.production">.env.production</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>VITE_APP_TITLE=My App</span></span></code></pre></div></div><p>在你的应用中，你可以使用 <code>import.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>在某些情况下，若想在 <code>vite build</code> 时运行不同的模式来渲染不同的标题，你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想在 staging （预发布）模式下构建应用：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> staging</span></span></code></pre></div><p>还需要新建一个 <code>.env.staging</code> 文件：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env.staging">.env.staging</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>VITE_APP_TITLE=My App (staging)</span></span></code></pre></div></div><p>由于 <code>vite build</code> 默认运行生产模式构建，你也可以通过使用不同的模式和对应的 <code>.env</code> 文件配置来改变它，用以运行开发模式的构建：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".env.testing">.env.testing</span></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>NODE_ENV=development</span></span></code></pre></div></div><h3 id="node-env-and-modes" tabindex="-1">NODE_ENV 和 模式 <a class="header-anchor" href="#node-env-and-modes" aria-label="Permalink to “NODE_ENV 和 模式”">​</a></h3><p>需要注意的是，<code>NODE_ENV</code>（<code>process.env.NODE_ENV</code>）和模式是两个不同的概念。以下是不同命令如何影响 <code>NODE_ENV</code> 和模式：</p><table tabindex="0"><thead><tr><th>Command</th><th>NODE_ENV</th><th>Mode</th></tr></thead><tbody><tr><td><code>vite build</code></td><td><code>&quot;production&quot;</code></td><td><code>&quot;production&quot;</code></td></tr><tr><td><code>vite build --mode development</code></td><td><code>&quot;production&quot;</code></td><td><code>&quot;development&quot;</code></td></tr><tr><td><code>NODE_ENV=development vite build</code></td><td><code>&quot;development&quot;</code></td><td><code>&quot;production&quot;</code></td></tr><tr><td><code>NODE_ENV=development vite build --mode development</code></td><td><code>&quot;development&quot;</code></td><td><code>&quot;development&quot;</code></td></tr></tbody></table><p><code>NODE_ENV</code> 和模式的不同值也会反映在相应的 <code>import.meta.env</code> 属性上：</p><table tabindex="0"><thead><tr><th>Command</th><th><code>import.meta.env.PROD</code></th><th><code>import.meta.env.DEV</code></th></tr></thead><tbody><tr><td><code>NODE_ENV=production</code></td><td><code>true</code></td><td><code>false</code></td></tr><tr><td><code>NODE_ENV=development</code></td><td><code>false</code></td><td><code>true</code></td></tr><tr><td><code>NODE_ENV=other</code></td><td><code>false</code></td><td><code>true</code></td></tr></tbody></table><table tabindex="0"><thead><tr><th>Command</th><th><code>import.meta.env.MODE</code></th></tr></thead><tbody><tr><td><code>--mode production</code></td><td><code>&quot;production&quot;</code></td></tr><tr><td><code>--mode development</code></td><td><code>&quot;development&quot;</code></td></tr><tr><td><code>--mode staging</code></td><td><code>&quot;staging&quot;</code></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title"><code>.env</code> 文件中的 <code>NODE_ENV</code></p><p><code>NODE_ENV=...</code> 可以在命令中设置，也可以在 <code>.env</code> 文件中设置。如果在 <code>.env.[mode]</code> 文件中指定了 <code>NODE_ENV</code>，则可以使用模式来控制其值。不过，<code>NODE_ENV</code> 和模式仍然是两个不同的概念。</p><p>命令中使用 <code>NODE_ENV=...</code> 的主要好处是，它允许 Vite 提前检测到该值。这也使你能够在 Vite 配置中读取 <code>process.env.NODE_ENV</code>，因为 Vite 只有在解析配置之后才能加载环境变量文件。</p></div>`,53)])])}const g=s(n,[["render",d]]);export{k as __pageData,g as default};
