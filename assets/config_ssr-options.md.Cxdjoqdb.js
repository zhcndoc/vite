import{_ as o,c as s,o as r,aq as t}from"./chunks/framework.CYFbgU53.js";const h=JSON.parse('{"title":"SSR 选项","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/config/ssr-options"}],["meta",{"property":"og:title","content":"SSR 选项"}]]},"headers":[],"relativePath":"config/ssr-options.md","filePath":"config/ssr-options.md"}'),n={name:"config/ssr-options.md"};function d(a,e,i,l,c,p){return r(),s("div",null,[...e[0]||(e[0]=[t('<h1 id="ssr-options" tabindex="-1">SSR 选项 <a class="header-anchor" href="#ssr-options" aria-label="Permalink to “SSR 选项”">​</a></h1><p>除非另有说明，本节中的选项适用于开发和构建。</p><h2 id="ssr-external" tabindex="-1">ssr.external <a class="header-anchor" href="#ssr-external" aria-label="Permalink to “ssr.external”">​</a></h2><ul><li><strong>类型:</strong> <code>string[] | true</code></li><li><strong>相关：</strong> <a href="/guide/ssr.html#ssr-externals">SSR 外部化</a></li></ul><p>这个选项可以将指定的依赖项和它们传递的依赖项进行外部化，以供服务端渲染（SSR）使用。默认情况下，所有的依赖项都会被外部化，除了那些被链接的依赖项（为了HMR）。如果希望将这些软链接的依赖项也外部化，你可以将其名称传给这个选项。</p><p>如果这个选项设置为 <code>true</code>，那么所有的依赖项，包括被链接的依赖项，都将被外部化。</p><p>需要注意的是，如果在该选项明确列出了一些依赖项（使用 <code>string[]</code> 类型），那么其将始终被优先考虑，即使它们也在 <code>ssr.noExternal</code> 中被列出（无论使用何种类型）。</p><h2 id="ssr-noexternal" tabindex="-1">ssr.noExternal <a class="header-anchor" href="#ssr-noexternal" aria-label="Permalink to “ssr.noExternal”">​</a></h2><ul><li><strong>类型：</strong> <code>string | RegExp | (string | RegExp)[] | true</code></li><li><strong>相关：</strong> <a href="/guide/ssr.html#ssr-externals">SSR 外部化</a></li></ul><p>这个选项可以防止列出的依赖项在服务端渲染（SSR）时被外部化，这些依赖项将会在构建过程中被打包。默认情况下，只有软链接的依赖项不会被外部化（这是为了HMR）。如果你希望将软链接的依赖项也外部化，可以将其名称传给 <code>ssr.external</code> 选项。</p><p>如果这个选项设置为 <code>true</code>，那么没有任何依赖项会被外部化。然而，如果你在 <code>ssr.external</code> 中明确列出了一些依赖项（使用 <code>string[]</code> 类型），那么这些依赖项可以优先被外部化。如果设置了 <code>ssr.target: &#39;node&#39;</code>，那么 Node.js 的内置模块也会被默认外部化。</p><p>需要注意的是，如果 <code>ssr.noExternal: true</code> 和 <code>ssr.external: true</code> 都被设置了，那么 <code>ssr.noExternal</code> 将优先生效，没有任何依赖项会被外部化。</p><h2 id="ssr-target" tabindex="-1">ssr.target <a class="header-anchor" href="#ssr-target" aria-label="Permalink to “ssr.target”">​</a></h2><ul><li><strong>类型：</strong> <code>&#39;node&#39; | &#39;webworker&#39;</code></li><li><strong>默认：</strong> <code>node</code></li></ul><p>SSR 服务器的构建目标。</p><h2 id="ssr-resolve-conditions" tabindex="-1">ssr.resolve.conditions <a class="header-anchor" href="#ssr-resolve-conditions" aria-label="Permalink to “ssr.resolve.conditions”">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li><li><strong>默认：</strong> <code>[&#39;module&#39;, &#39;node&#39;, &#39;development|production&#39;]</code>(<code>defaultServerConditions</code>) (当 <code>ssr.target === &#39;webworker&#39;</code> 时为 <code>[&#39;module&#39;, &#39;browser&#39;, &#39;development|production&#39;]</code> (<code>defaultClientConditions</code>) )</li><li><strong>相关：</strong> <a href="./shared-options.html#resolve-conditions">解析情景</a></li></ul><p>这些条件会在插件管道中使用，并且只会影响 SSR 构建期间的非外部化依赖项。使用 <code>ssr.resolve.externalConditions</code> 来影响外部化导入。</p><h2 id="ssr-resolve-externalconditions" tabindex="-1">ssr.resolve.externalConditions <a class="header-anchor" href="#ssr-resolve-externalconditions" aria-label="Permalink to “ssr.resolve.externalConditions”">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li><li><strong>默认：</strong> <code>[&#39;node&#39;]</code></li></ul><p>在对外部化的直接依赖项（由 Vite 导入的外部依赖项）进行 SSR 导入（包括 <code>ssrLoadModule</code>）期间所使用的条件。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>使用该选项时，请确保在开发和构建中使用 <a href="https://nodejs.org/docs/latest/api/cli.html#-c-condition---conditionscondition" target="_blank" rel="noreferrer"><code>--conditions</code> flag</a> 以相同的值运行 Node，以获得一致的行为。</p><p>例如，当设置 <code>[&#39;node&#39;, &#39;custom&#39;]</code> 时，应该在 dev 中运行 <code>NODE_OPTIONS=&#39;--conditions custom&#39; vite</code>，在 build 后运行 <code>NODE_OPTIONS=&quot;--conditions custom&quot; node ./dist/server.js</code>。</p></div><h2 id="ssr-resolve-mainfields" tabindex="-1">ssr.resolve.mainFields <a class="header-anchor" href="#ssr-resolve-mainfields" aria-label="Permalink to “ssr.resolve.mainFields”">​</a></h2><ul><li><strong>类型：</strong> <code>string[]</code></li><li><strong>默认：</strong> <code>[&#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;]</code></li></ul><p>在解析一个包的入口文件时，会尝试使用 <code>package.json</code> 中的字段列表。请注意，这些字段的优先级低于从条件导出解析的 <code>exports</code> 字段：如果能从 <code>exports</code> 字段成功解析出入口文件，那么 main 字段将会被忽略。此设置仅影响未外部化的依赖项。</p>',25)])])}const u=o(n,[["render",d]]);export{h as __pageData,u as default};
