import{_ as r,c as o,o as a,aq as n}from"./chunks/framework.CYFbgU53.js";const m=JSON.parse('{"title":"使用 ModuleRunner API 进行服务端渲染","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.zhcndoc.com/changes/ssr-using-modulerunner"}],["meta",{"property":"og:title","content":"使用 ModuleRunner API 进行服务端渲染"}]]},"headers":[],"relativePath":"changes/ssr-using-modulerunner.md","filePath":"changes/ssr-using-modulerunner.md"}'),s={name:"changes/ssr-using-modulerunner.md"};function d(t,e,c,i,u,l){return a(),o("div",null,[...e[0]||(e[0]=[n('<h1 id="ssr-using-modulerunner-api" tabindex="-1">使用 ModuleRunner API 进行服务端渲染 <a class="header-anchor" href="#ssr-using-modulerunner-api" aria-label="Permalink to “使用 ModuleRunner API 进行服务端渲染”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">反馈</p><p>可以在 <a href="https://github.com/vitejs/vite/discussions/16358" target="_blank" rel="noreferrer">环境 API 讨论</a> 中向我们提供反馈</p></div><p><code>server.ssrLoadModule</code> 已被从 <a href="/guide/api-environment.html#modulerunner">Module Runner</a> 导入所取代。</p><p>影响范围：<code>Vite 插件作者</code></p><div class="warning custom-block"><p class="custom-block-title">即将废弃</p><p><code>ModuleRunner</code> 最初在 <code>v6.0</code> 版本中被引入。我们计划在未来的主要版本中废弃 <code>server.ssrLoadModule</code>。如果想识别你的使用情况，可以在你的 vite 配置文件中将 <code>future.removeSsrLoadModule</code> 设置为 <code>&quot;warn&quot;</code>。</p></div><h2 id="motivation" tabindex="-1">动机 <a class="header-anchor" href="#motivation" aria-label="Permalink to “动机”">​</a></h2><p><code>server.ssrLoadModule(url)</code> 仅允许在 <code>ssr</code> 环境中导入模块，并且只能在与 Vite 开发服务器相同的进程中执行这些模块。对于具有自定义环境的应用程序，每个环境都关联一个 <code>ModuleRunner</code>，该模块可能在单独的线程或进程中运行。为了导入模块，我们现在使用 <code>moduleRunner.import(url)</code>。</p><h2 id="migration-guide" tabindex="-1">迁移指南 <a class="header-anchor" href="#migration-guide" aria-label="Permalink to “迁移指南”">​</a></h2><p>请查看 <a href="./../guide/api-environment-frameworks.html">用于框架的环境 API 指南</a>。</p><p>当使用 Module Runner API 时，不再需要调用 <code>server.ssrFixStacktrace</code> 和 <code>server.ssrRewriteStacktrace</code>。除非 <code>sourcemapInterceptor</code> 被设置为 <code>false</code>，否则堆栈追踪信息将会自动更新。</p>',10)])])}const h=r(s,[["render",d]]);export{m as __pageData,h as default};
