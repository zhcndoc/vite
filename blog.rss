<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Vite</title>
        <link>https://vite.dev/blog</link>
        <description>Next Generation Frontend Tooling</description>
        <lastBuildDate>Thu, 16 Oct 2025 15:35:24 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <image>
            <title>Vite</title>
            <url>https://vite.dev/og-image.jpg</url>
            <link>https://vite.dev/blog</link>
        </image>
        <copyright>Copyright © 2019-present VoidZero Inc. &amp; Vite Contributors</copyright>
        <item>
            <title><![CDATA[Vite 7.0 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite7.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite7.html</guid>
            <pubDate>Tue, 24 Jun 2025 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vite-7-0-is-out" tabindex="-1">Vite 7.0 发布了！ <a class="header-anchor" href="#vite-7-0-is-out" aria-label="Permalink to “Vite 7.0 发布了！”">&#8203;</a></h1>
<p><em>2025年6月24日</em></p>
<p><img src="/og-image-announcing-vite7.webp" alt="Vite 7 Announcement Cover Image" width="2400" height="1200"></p>
<p>我们很高兴与大家分享 Vite 7 的发布！从 Evan You 向 Vite 仓库提交第一次 commit 至今已经过去 5 年了，当时没有人能预料到前端生态会发生如此巨大的变化。如今，大多数现代前端框架和工具正在协同工作，构建在 Vite 共享的基础设施之上。通过更高层次的共享，它们能够以更快的速度进行创新。Vite 现在每周被下载 3100 万次，在上次重大版本发布后的七个月内增长了 1400 万次下载量。</p>
<p>今年，我们将迈出几个重要的步伐。首先，<a href="https://viteconf.org" target="_blank" rel="noreferrer">ViteConf</a> 将首次以线下形式举办！Vite 生态系统将于 10 月 9-10 日在阿姆斯特丹齐聚一堂！本次活动由 <a href="https://jsworldconference.com/" target="_blank" rel="noreferrer">JSWorld</a> 联合 <a href="https://bolt.new" target="_blank" rel="noreferrer">Bolt</a>、<a href="https://voidzero.dev" target="_blank" rel="noreferrer">VoidZero</a> 和 Vite 核心团队共同组织！我们已经成功举办过三届精彩的<a href="https://www.youtube.com/@viteconf/playlists" target="_blank" rel="noreferrer">ViteConf 线上活动</a>，现在迫不及待地想要与大家面对面交流。欢迎查看演讲嘉宾名单并前往 <a href="https://viteconf.org" target="_blank" rel="noreferrer">ViteConf 官网</a> 获取门票信息。</p>
<p>此外，<a href="https://voidzero.dev/posts/announcing-voidzero-inc" target="_blank" rel="noreferrer">VoidZero</a> 继续在构建面向 JavaScript 生态系统的开源统一开发工具链的使命中取得重大进展。在过去一年里，VoidZero 团队一直在开发 <a href="https://rolldown.rs/" target="_blank" rel="noreferrer">Rolldown</a> —— 一个基于 Rust 的下一代打包工具（bundler），作为现代化 Vite 核心的更广泛努力的一部分。你现在就可以通过使用 <code>rolldown-vite</code> 包来体验基于 Rolldown 的 Vite，替代默认的 <code>vite</code> 包。它是一个即插即用的替代方案，未来 Rolldown 将成为 Vite 的默认打包工具。切换后可以显著减少你的构建时间，尤其是对于较大的项目而言。更多信息请参阅 <a href="https://voidzero.dev/posts/announcing-rolldown-vite" target="_blank" rel="noreferrer">Rolldown-Vite 宣布博文</a> 和我们的 <a href="https://vite.dev/rolldown" target="_blank" rel="noreferrer">迁移指南</a>。</p>
<p>通过 VoidZero 与 <a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">NuxtLabs</a> 的合作，Anthony Fu 正在致力于开发 Vite DevTools。它将为所有基于 Vite 的项目和框架提供更深入且富有洞察力的调试与分析功能。你可以阅读 <a href="https://voidzero.dev/posts/voidzero-nuxtlabs-vite-devtools" target="_blank" rel="noreferrer">VoidZero 与 NuxtLabs 联手打造 Vite DevTools 的博客文章</a> 了解更多信息。</p>
<p>快速链接：</p>
<ul>
<li><a href="https://vite.dev" target="_blank" rel="noreferrer">英文文档</a></li>
<li>新增翻译：<a href="https://fa.vite.dev/" target="_blank" rel="noreferrer">فارسی</a></li>
<li>翻译版本：<a href="/">简体中文</a>、<a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>、<a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>、<a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a>、<a href="https://ko.vite.dev/" target="_blank" rel="noreferrer">한국어</a>、<a href="https://de.vite.dev/" target="_blank" rel="noreferrer">Deutsch</a></li>
<li><a href="/guide/migration.html">迁移指南</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md" target="_blank" rel="noreferrer">GitHub 更新日志</a></li>
</ul>
<p>使用 <a href="https://vite.new" target="_blank" rel="noreferrer">vite.new</a> 在线体验 Vite 7，或者通过运行 <code>pnpm create vite</code> 在本地使用你偏好的框架搭建 Vite 项目。更多信息请查看<a href="/guide/">入门指南</a>。</p>
<p>我们诚邀你加入我们，帮助我们改进 Vite（加入超过 <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">1.1K 位 Vite Core 贡献者</a>）、我们的依赖项、插件以及生态系统中的项目。了解更多信息，请参阅我们的<a href="https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">贡献指南</a>。</p>
<p>一个好的入门方法包括：<a href="https://github.com/vitejs/vite/issues" target="_blank" rel="noreferrer">整理问题</a>、<a href="https://github.com/vitejs/vite/pulls" target="_blank" rel="noreferrer">审阅 PR</a>、基于未解决问题提交测试 PR，或在 <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noreferrer">讨论区</a> 以及 Vite Land 的 <a href="https://discord.com/channels/804011606160703521/1019670660856942652" target="_blank" rel="noreferrer">帮助论坛</a> 中为他人提供帮助。如有任何疑问，欢迎加入我们的 <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord 社区</a>，并在 <a href="https://discord.com/channels/804011606160703521/804439875226173480" target="_blank" rel="noreferrer">#contributing 频道</a> 中与我们交流。</p>
<p>通过关注我们在 <a href="https://bsky.app/profile/vite.dev" target="_blank" rel="noreferrer">Bluesky</a>、<a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">X（原 Twitter）</a> 或 <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a>，保持更新并与更多基于 Vite 构建的开发者建立联系。</p>
<h2 id="node-js-support" tabindex="-1">Node.js 支持 <a class="header-anchor" href="#node-js-support" aria-label="Permalink to “Node.js 支持”">&#8203;</a></h2>
<p>Vite 现在要求使用 Node.js 20.19+ 或 22.12+。由于 Node.js 18 已于 2025 年 4 月底达到<a href="https://endoflife.date/nodejs" target="_blank" rel="noreferrer">生命周期终点（EOL）</a>，我们已不再支持该版本。</p>
<p>我们要求使用这些新的 Node.js 版本范围，以确保 Node.js 可以无需启用标志即可支持 <code>require(esm)</code>。这使我们能够仅以 ESM 格式发布 Vite 7.0，同时不会阻止 CJS 模块通过 <code>require</code> 调用 Vite 的 JavaScript API。有关当前 ESM 在生态系统中的发展状况的详细分析，请查看 Anthony Fu 的文章 <a href="https://antfu.me/posts/move-on-to-esm-only" target="_blank" rel="noreferrer">《迈向纯 ESM》</a>。</p>
<h2 id="default-browser-target-changed-to-baseline-widely-available" tabindex="-1">默认浏览器兼容性目标已更改为 Baseline Widely Available <a class="header-anchor" href="#default-browser-target-changed-to-baseline-widely-available" aria-label="Permalink to “默认浏览器兼容性目标已更改为 Baseline Widely Available”">&#8203;</a></h2>
<p><a href="https://web-platform-dx.github.io/web-features/" target="_blank" rel="noreferrer">Baseline</a> 为我们提供了明确的信息，指出了哪些 Web 平台特性在当今主流浏览器中可用。Baseline Widely Available，表示该功能已经十分成熟，可在多种设备和浏览器版本中正常工作，并且在各浏览器中至少已支持 30 个月。</p>
<p>在 Vite 7 中，默认浏览器目标将从 <code>'modules'</code> 更改为新的默认值：<code>'baseline-widely-available'</code>。每当我们发布一个重大版本时，所支持的浏览器列表都会更新，以匹配与“Baseline Widely Available”特性兼容的最低浏览器版本。Vite 7.0 中 <code>build.target</code> 的默认浏览器值变化如下：</p>
<ul>
<li>Chrome 87 → 107</li>
<li>Edge 88 → 107</li>
<li>Firefox 78 → 104</li>
<li>Safari 14.0 → 16.0</li>
</ul>
<p>这一变化为未来版本的浏览器兼容性带来了更高的可预测性。</p>
<h2 id="vitest" tabindex="-1">Vitest <a class="header-anchor" href="#vitest" aria-label="Permalink to “Vitest”">&#8203;</a></h2>
<p>对于 Vitest 用户而言，Vite 7.0 从 Vitest 3.2 开始得到支持。你可以阅读 <a href="https://vitest.dev/blog/vitest-3-2.html" target="_blank" rel="noreferrer">Vitest 3.2 发布博客</a>，了解更多关于 Vitest 团队如何持续改进 Vite 测试功能的内容。</p>
<h2 id="environment-api" tabindex="-1">Environment API <a class="header-anchor" href="#environment-api" aria-label="Permalink to “Environment API”">&#8203;</a></h2>
<p>Vite 6 是自 Vite 2 以来最具意义的一次重大发布，它通过 <a href="https://vite.dev/blog/announcing-vite6.html#experimental-environment-api" target="_blank" rel="noreferrer">全新的实验性 Environment API</a> 引入了多项新功能。我们暂时将这些新 API 保持为实验性状态，以便生态系统逐步评估它们在各类项目中的适用性并提供反馈。如果你正在基于 Vite 构建项目，我们鼓励你尝试使用这些新 API，并通过<a href="https://github.com/vitejs/vite/discussions/16358" target="_blank" rel="noreferrer">此开放讨论话题</a> 向我们提供你的使用反馈。</p>
<p>在 Vite 7 中，我们新增了一个 <code>buildApp</code> 钩子，使插件能够协调环境的构建过程。详情请参阅<a href="/guide/api-environment-frameworks.html#environments-during-build">面向框架的 Environment API 指南</a>。</p>
<p>我们要感谢那些一直在测试新 API 并帮助我们稳定新功能的团队。例如，Cloudflare 团队宣布了其 Cloudflare Vite 插件的 1.0 版本发布，并正式支持 React Router v7。他们的插件展示了 Environment API 在运行时提供者方面的潜力。要了解更多关于他们的实现方式和未来计划，请查看文章 <a href="https://blog.cloudflare.com/introducing-the-cloudflare-vite-plugin/" target="_blank" rel="noreferrer">“Just use Vite”… with the Workers runtime</a>。</p>
<h2 id="migrating-to-vite-7" tabindex="-1">迁移到 Vite 7 <a class="header-anchor" href="#migrating-to-vite-7" aria-label="Permalink to “迁移到 Vite 7”">&#8203;</a></h2>
<p>从 Vite 6 升级到 Vite 7 应该是一次平滑的体验。我们移除了已弃用的功能，例如 Sass 的旧版 API 支持以及 <code>splitVendorChunkPlugin</code>，这些改动不会影响你的项目。我们仍然建议你在升级前查看<a href="/guide/migration.html">详细的迁移指南</a>。</p>
<p>所有变更的完整列表请见 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md" target="_blank" rel="noreferrer">Vite 7 更新日志</a>。</p>
<h2 id="acknowledgments" tabindex="-1">致谢 <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “致谢”">&#8203;</a></h2>
<p>Vite 7 由 <a href="/team.html">Vite 团队</a> 在广大贡献者、下游维护者和插件开发者的帮助下精心打造而成。我们特别感谢 <a href="https://github.com/sapphi-red" target="_blank" rel="noreferrer">sapphi-red</a>，以表彰他在 <code>rolldown-vite</code> 和本次发布中做出的出色工作。Vite 由 <a href="https://voidzero.dev" target="_blank" rel="noreferrer">VoidZero</a> 打造，并得到了 <a href="https://bolt.new" target="_blank" rel="noreferrer">Bolt</a> 和 <a href="https://nuxtlabs.com" target="_blank" rel="noreferrer">Nuxt Labs</a> 的合作支持。我们还要感谢我们的赞助商，包括 <a href="https://github.com/sponsors/vitejs" target="_blank" rel="noreferrer">Vite 的 GitHub 赞助计划</a> 和 <a href="https://opencollective.com/vite" target="_blank" rel="noreferrer">Vite 的 Open Collective 页面</a> 上的支持者。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 6.0 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite6.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite6.html</guid>
            <pubDate>Tue, 26 Nov 2024 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vite-6-0-is-out" tabindex="-1">Vite 6.0 发布了！ <a class="header-anchor" href="#vite-6-0-is-out" aria-label="Permalink to “Vite 6.0 发布了！”">&#8203;</a></h1>
<p><em>2024年11月26日</em></p>
<p><img src="/og-image-announcing-vite6.webp" alt="Vite 6 Announcement Cover Image" width="3200" height="1602"></p>
<p>今天，Vite 迎来了发展历程中的重要里程碑。我们很高兴地宣布，Vite 6 正式发布了！这一重大版本的发布离不开 Vite <a href="/team.html">团队</a>、<a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">贡献者</a> 以及整个生态系统合作伙伴的共同努力。</p>
<p>过去一年中，Vite 的采用率持续增长，自 Vite 5 发布以来，npm 每周下载量从 750 万次跃升至 1700 万次。<a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> 不仅越来越受用户欢迎，还开始形成自己的生态系统。例如，<a href="https://storybook.js.org" target="_blank" rel="noreferrer">Storybook</a> 推出了由 Vitest 支持的全新测试功能。</p>
<p>Vite 生态系统也迎来了一批新成员，包括 <a href="https://tanstack.com/start" target="_blank" rel="noreferrer">TanStack Start</a>、<a href="https://onestack.dev/" target="_blank" rel="noreferrer">One</a>、<a href="https://emberjs.com/" target="_blank" rel="noreferrer">Ember</a> 等框架。Web 开发领域的创新速度日益加快，<a href="https://astro.build/" target="_blank" rel="noreferrer">Astro</a>、<a href="https://nuxt.com/" target="_blank" rel="noreferrer">Nuxt</a>、<a href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>、<a href="https://www.solidjs.com/blog/introducing-solidstart" target="_blank" rel="noreferrer">Solid Start</a>、<a href="https://qwik.builder.io/qwikcity/overview" target="_blank" rel="noreferrer">Qwik City</a>、<a href="https://redwoodjs.com/" target="_blank" rel="noreferrer">RedwoodJS</a>、<a href="https://reactrouter.com/" target="_blank" rel="noreferrer">React Router</a> 等项目都在不断推陈出新。</p>
<p>Vite 已被 OpenAI、Google、Apple、Microsoft、NASA、Shopify、Cloudflare、GitLab、Reddit 和 Linear 等众多知名公司采用。两个月前，我们创建了一份 <a href="https://github.com/vitejs/companies-using-vite" target="_blank" rel="noreferrer">使用 Vite 的公司列表</a>。令人欣喜的是，许多开发者提交 PR 将他们的公司添加到列表中。回首 Vite 诞生至今，我们共同打造的生态系统增长速度之快，实在令人难以置信。</p>
<p><img src="./../images/vite6-npm-weekly-downloads.webp" alt="Vite weekly npm downloads" width="2942" height="1416"></p>
<h3 id="speeding-up-the-vite-ecosystem" tabindex="-1">加速 Vite 生态系统 <a class="header-anchor" href="#speeding-up-the-vite-ecosystem" aria-label="Permalink to “加速 Vite 生态系统”">&#8203;</a></h3>
<p>上个月，<a href="https://stackblitz.com" target="_blank" rel="noreferrer">StackBlitz</a> 再次主办了第三届 <a href="https://viteconf.org/24/replay" target="_blank" rel="noreferrer">ViteConf</a>，吸引了整个社区的广泛参与。这是迄今为止规模最大的 Vite 会议，生态系统中的各路开发者齐聚一堂。Evan You 正式宣布成立 <a href="https://staging.voidzero.dev/posts/announcing-voidzero-inc" target="_blank" rel="noreferrer">VoidZero</a>，这是一家致力于为 JavaScript 生态系统构建开源、高性能和统一开发工具链的公司。VoidZero 推出了 <a href="https://rolldown.rs" target="_blank" rel="noreferrer">Rolldown</a> 和 <a href="https://oxc.rs" target="_blank" rel="noreferrer">Oxc</a>，他们的团队正在加紧准备这些工具以供 Vite 采用。想了解 Vite 未来如何借助 Rust 实现更强大的性能，不妨观看 Evan 的主题演讲。</p>
<YouTubeVideo videoId="EKvvptbTx6k?si=EZ-rFJn4pDW3tUvp" /><p><a href="https://stackblitz.com" target="_blank" rel="noreferrer">Stackblitz</a> 推出了 <a href="https://bolt.new" target="_blank" rel="noreferrer">bolt.new</a>，这是一个结合了 Claude 和 WebContainers 的 Remix 应用，允许你使用提示语、编辑、运行和部署全栈应用。Nate Weiner 宣布了 <a href="https://onestack.dev/" target="_blank" rel="noreferrer">One</a>，一个新的 Vite 驱动的 Web 和原生 React 框架。Storybook 展示了他们最新由 Vitest 驱动的 <a href="https://youtu.be/8t5wxrFpCQY?si=PYZoWKf-45goQYDt" target="_blank" rel="noreferrer">测试功能</a>。还有更多精彩内容。我们建议你观看 <a href="https://www.youtube.com/playlist?list=PLqGQbXn_GDmnObDzgjUF4Krsfl6OUKxtp" target="_blank" rel="noreferrer">全部 43 场演讲</a>。演讲者们付出了巨大努力，分享了每个项目的最新进展。</p>
<p>Vite 还更新了主页和域名。请记得将你的链接更新为新的 <a href="https://vite.dev" target="_blank" rel="noreferrer">vite.dev</a> 域名。新设计和实现由 VoidZero 完成，正是他们制作了自己的网站。特别感谢 <a href="https://bento.me/rmoon" target="_blank" rel="noreferrer">Vicente Rodriguez</a> 和 <a href="https://marchantweb.com/" target="_blank" rel="noreferrer">Simon Le Marchant</a> 的贡献。</p>
<h3 id="the-next-vite-major-is-here" tabindex="-1">Vite 6 的到来 <a class="header-anchor" href="#the-next-vite-major-is-here" aria-label="Permalink to “Vite 6 的到来”">&#8203;</a></h3>
<p>Vite 6 是自 Vite 2 以来最重要的主要版本发布。我们渴望与生态系统合作，通过新的 API 继续扩展我们的共享资源，并一如既往地提供一个更完善的构建基础。</p>
<p>快速链接：</p>
<ul>
<li><a href="https://vite.dev" target="_blank" rel="noreferrer">英文文档</a></li>
<li>翻译版本：<a href="/">简体中文</a>、<a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>、<a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>、<a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a>、<a href="https://ko.vite.dev/" target="_blank" rel="noreferrer">한국어</a>、<a href="https://de.vite.dev/" target="_blank" rel="noreferrer">Deutsch</a></li>
<li><a href="/guide/migration.html">迁移指南</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#600-2024-11-26" target="_blank" rel="noreferrer">GitHub 更新日志</a></li>
</ul>
<p>如果你是 Vite 的新用户，我们建议首先阅读 <a href="/guide/">入门指南</a> 和 <a href="/guide/features.html">功能介绍</a> 部分。</p>
<p>我们要感谢超过 <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">1000 位 Vite Core 贡献者</a> 以及 Vite 插件、集成、工具和翻译的维护者和贡献者，他们帮助我们打造了这个新的主要版本。我们也邀请你参与进来，帮助我们改进整个生态系统的 Vite。了解更多信息，请参阅我们的 <a href="https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">贡献指南</a>。</p>
<p>如果准备开始的话，我们建议可以帮助 <a href="https://github.com/vitejs/vite/issues" target="_blank" rel="noreferrer">分类问题</a>、<a href="https://github.com/vitejs/vite/pulls" target="_blank" rel="noreferrer">审查 PR</a>、根据开放问题发送失败的测试 PR，并在<a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noreferrer">讨论</a> 和 Vite Land 的 <a href="https://discord.com/channels/804011606160703521/1019670660856942652" target="_blank" rel="noreferrer">帮助论坛</a> 中帮助他人。如果你想与我们交流，请加入我们的 <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord 社区</a> 并在 <a href="https://discord.com/channels/804011606160703521/804439875226173480" target="_blank" rel="noreferrer">#贡献频道</a> 中打个招呼。</p>
<p>有关 Vite 生态系统和 Vite Core 的最新消息，请关注我们的 <a href="https://bsky.app/profile/vite.dev" target="_blank" rel="noreferrer">Bluesky</a>、<a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">X</a> 或 <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a>。</p>
<h3 id="getting-started-with-vite-6" tabindex="-1">开始使用 Vite 6 <a class="header-anchor" href="#getting-started-with-vite-6" aria-label="Permalink to “开始使用 Vite 6”">&#8203;</a></h3>
<p>你可以使用 <code>pnpm create vite</code> 快速搭建一个 Vite 应用，使用你喜欢的框架，或在线体验 Vite 6，访问 <a href="https://vite.new" target="_blank" rel="noreferrer">vite.new</a>。你还可以运行 <code>pnpm create vite-extra</code> 以获取其他框架和运行时（Solid、Deno、SSR 和库起始模板）的模板。当你在 <code>create vite</code> 下选择 <code>Others</code> 选项时，也可以使用 <code>create vite-extra</code> 模板。</p>
<p>Vite 启动模板旨在作为测试 Vite 与不同框架结合的演练场。在构建下一个项目时，你可以试着使用每个框架推荐的启动模板。<code>create vite</code> 还提供了一些框架的快捷设置，如 <code>create-vue</code>、<code>Nuxt 3</code>、<code>SvelteKit</code>、<code>Remix</code>、<code>Analog</code> 和 <code>Angular</code>。</p>
<h3 id="node-js-support" tabindex="-1">Node.js 支持 <a class="header-anchor" href="#node-js-support" aria-label="Permalink to “Node.js 支持”">&#8203;</a></h3>
<p>Vite 6 与 Vite 5 类似，支持 Node.js 18、20 和 22+。Node.js 21 的支持已被移除。Vite 在旧版本的 Node.js <a href="https://endoflife.date/nodejs" target="_blank" rel="noreferrer">生命周期终止</a> （EOL）后停止支持。Node.js 18 EOL 在 2025 年 4 月底，届时我们可能会发布一个新主要版本以提高所需的 Node.js 版本。</p>
<h3 id="experimental-environment-api" tabindex="-1">实验性环境 API <a class="header-anchor" href="#experimental-environment-api" aria-label="Permalink to “实验性环境 API”">&#8203;</a></h3>
<p>Vite 正在通过新的环境 API 变得更加灵活。这些新 API 将允许框架作者提供更接近生产环境的开发体验，并为生态系统共享新的构建模块。如果你正在构建一个 SPA，使用 Vite 的单一客户端环境，一切将如以往一样工作。即使对于自定义 SSR 应用，Vite 6 也向后兼容。环境 API 的主要目标受众是框架作者。</p>
<p>对于感兴趣的终端用户，<a href="https://github.com/sapphi-red" target="_blank" rel="noreferrer">Sapphi</a> 撰写了一篇很好的 <a href="https://green.sapphi.red/blog/increasing-vites-potential-with-the-environment-api" target="_blank" rel="noreferrer">环境 API 介绍</a> 指南。这是一个很好的起点，帮助你理解我们为何努力使 Vite 更加灵活。</p>
<p>如果你是框架作者或 Vite 插件维护者，并希望利用新 API，你可以在 <a href="https://main.vite.dev/guide/api-environment" target="_blank" rel="noreferrer">环境 API 指南</a> 中了解更多信息。</p>
<p>我们要感谢所有参与定义和实现新 API 的伙伴。这个故事始于 Vite 2 采用了由 <a href="https://github.com/Rich-Harris" target="_blank" rel="noreferrer">Rich Harris</a> 和 <a href="https://svelte.dev/docs/kit" target="_blank" rel="noreferrer">SvelteKit</a> 团队开创的无打包 SSR 开发方案。Vite 的 SSR 转换随后启发了 <a href="https://github.com/antfu/" target="_blank" rel="noreferrer">Anthony Fu</a> 和 <a href="https://github.com/pi0" target="_blank" rel="noreferrer">Pooya Parsa</a> 创建 vite-node 并改进 <a href="https://antfu.me/posts/dev-ssr-on-nuxt" target="_blank" rel="noreferrer">Nuxt 的开发 SSR 方案</a>。Anthony 之后使用 vite-node 为 <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> 提供支持，而 <a href="https://github.com/sheremet-va" target="_blank" rel="noreferrer">Vladimir Sheremet</a> 在维护 Vitest 的过程中也在不断改进它。2023 年初，Vladimir 开始将 vite-node 上游合并到 Vite Core 中，一年后我们在 Vite 5.1 中将其作为 Runtime API 发布。来自生态系统合作伙伴（特别感谢 Cloudflare 团队）的反馈推动我们对 Vite 的环境进行更雄心勃勃的重构。你可以在 <a href="https://www.youtube.com/watch?v=WImor3HDyqU?si=EZ-rFJn4pDW3tUvp" target="_blank" rel="noreferrer">Patak 的 ViteConf 24 演讲</a> 中了解更多关于这个故事的信息。</p>
<p>Vite 团队的每个人都参与了新 API 的定义，该 API 是与生态系统中许多项目的反馈共同设计的。感谢所有参与者！如果你正在基于 Vite 构建框架、插件或工具，我们鼓励你参与进来。新 API 是实验性的。我们将与生态系统合作，审查新 API 的使用方式，并在下一个主要版本中稳定它们。如果你想提问或反馈意见，这里有一个 <a href="https://github.com/vitejs/vite/discussions/16358" target="_blank" rel="noreferrer">开放的 GitHub 讨论</a>。</p>
<h2 id="main-changes" tabindex="-1">主要变化 <a class="header-anchor" href="#main-changes" aria-label="Permalink to “主要变化”">&#8203;</a></h2>
<ul>
<li><a href="/guide/migration.html#default-value-for-resolve-conditions"><code>resolve.conditions</code> 默认值</a></li>
<li><a href="/guide/migration.html#json-stringify">JSON 序列化</a></li>
<li><a href="/guide/migration.html#extended-support-of-asset-references-in-html-elements">在 HTML 元素中扩展对资源引用的支持</a></li>
<li><a href="/guide/migration.html#postcss-load-config">postcss-load-config</a></li>
<li><a href="/guide/migration.html#sass-now-uses-modern-api-by-default">Sass 现在默认使用现代 API</a></li>
<li><a href="/guide/migration.html#customize-css-output-file-name-in-library-mode">在&quot;库&quot;模式下自定义 CSS 输出文件名</a></li>
<li><a href="/guide/migration.html#advanced">以及更多仅影响少数用户的更改</a></li>
</ul>
<p>此外，还有一个新的 <a href="/changes/">破坏性变更</a> 页面，列出了 Vite 中所有计划的、正在考虑的和过去的更改。</p>
<h2 id="migrating-to-vite-6" tabindex="-1">迁移到 Vite 6 <a class="header-anchor" href="#migrating-to-vite-6" aria-label="Permalink to “迁移到 Vite 6”">&#8203;</a></h2>
<p>对于大多数项目，升级到 Vite 6 应该是很直接的，但我们建议在升级前查看 <a href="/guide/migration.html">详细的迁移指南</a>。</p>
<p>完整的更改列表请参见 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#500-2024-11-26" target="_blank" rel="noreferrer">Vite 6 更新日志</a>。</p>
<h2 id="acknowledgments" tabindex="-1">致谢 <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “致谢”">&#8203;</a></h2>
<p>Vite 6 的发布离不开我们社区贡献者、下游维护者、插件作者和 <a href="/team.html">Vite 团队</a> 的辛勤工作。我们感谢所有支持 Vite 开发的个人和公司。Vite 由 <a href="https://voidzero.dev" target="_blank" rel="noreferrer">VoidZero</a> 与 <a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a>、<a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">Nuxt Labs</a> 和 <a href="https://astro.build" target="_blank" rel="noreferrer">Astro</a> 合作呈现。特别感谢 <a href="https://github.com/sponsors/vitejs" target="_blank" rel="noreferrer">Vite 的 GitHub 赞助者</a> 和 <a href="https://opencollective.com/vite" target="_blank" rel="noreferrer">Vite 的 Open Collective</a> 上的赞助者。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 5.1 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite5-1.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite5-1.html</guid>
            <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[<h1 id="vite-5-1-is-out" tabindex="-1">Vite 5.1 is out! <a class="header-anchor" href="#vite-5-1-is-out" aria-label="Permalink to “Vite 5.1 is out!”">&#8203;</a></h1>
<p><em>February 8, 2024</em></p>
<p><img src="/og-image-announcing-vite5-1.webp" alt="Vite 5.1 Announcement Cover Image" width="2800" height="1400"></p>
<p>Vite 5 <a href="./announcing-vite5.html">was released</a> last November, and it represented another big leap for Vite and the ecosystem. A few weeks ago we celebrated 10 million weekly npm downloads and 900 contributors to the Vite repo. Today, we're excited to announce the release of Vite 5.1.</p>
<p>Quick links: <a href="/">Docs</a>, <a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#510-2024-02-08" target="_blank" rel="noreferrer">Changelog</a></p>
<p>Docs in other languages: <a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a>, <a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>, <a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>, <a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a>, <a href="https://ko.vite.dev/" target="_blank" rel="noreferrer">한국어</a>, <a href="https://de.vite.dev/" target="_blank" rel="noreferrer">Deutsch</a></p>
<p>Try Vite 5.1 online in StackBlitz: <a href="https://vite.new/vanilla-ts" target="_blank" rel="noreferrer">vanilla</a>, <a href="https://vite.new/vue-ts" target="_blank" rel="noreferrer">vue</a>, <a href="https://vite.new/react-ts" target="_blank" rel="noreferrer">react</a>, <a href="https://vite.new/preact-ts" target="_blank" rel="noreferrer">preact</a>, <a href="https://vite.new/lit-ts" target="_blank" rel="noreferrer">lit</a>, <a href="https://vite.new/svelte-ts" target="_blank" rel="noreferrer">svelte</a>, <a href="https://vite.new/solid-ts" target="_blank" rel="noreferrer">solid</a>, <a href="https://vite.new/qwik-ts" target="_blank" rel="noreferrer">qwik</a>.</p>
<p>If you're new to Vite, we suggest reading first the <a href="/guide/">Getting Started</a> and <a href="/guide/features.html">Features</a> guides.</p>
<p>To stay up to date, follow us on <a href="https://x.com/vite_js" target="_blank" rel="noreferrer">X</a> or <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a>.</p>
<h2 id="vite-runtime-api" tabindex="-1">Vite Runtime API <a class="header-anchor" href="#vite-runtime-api" aria-label="Permalink to “Vite Runtime API”">&#8203;</a></h2>
<p>Vite 5.1 adds experimental support for a new Vite Runtime API. It allows running any code by processing it with Vite plugins first. It is different from <code>server.ssrLoadModule</code> because the runtime implementation is decoupled from the server. This lets library and framework authors implement their own layer of communication between the server and the runtime. This new API is intended to replace Vite's current SSR primitives once it is stable.</p>
<p>The new API brings many benefits:</p>
<ul>
<li>Support for HMR during SSR.</li>
<li>It is decoupled from the server, so there is no limit on how many clients can use a single server - every client has its own module cache (you can even communicate with it how you want - using message channel/fetch call/direct function call/websocket).</li>
<li>It doesn't depend on any node/bun/deno built-in APIs, so it can run in any environment.</li>
<li>It's easy to integrate with tools that have their own mechanism to run code (you can provide a runner to use <code>eval</code> instead of <code>new AsyncFunction</code> for example).</li>
</ul>
<p>The initial idea <a href="https://github.com/nuxt/vite/pull/201" target="_blank" rel="noreferrer">was proposed by Pooya Parsa</a> and implemented by <a href="https://github.com/antfu" target="_blank" rel="noreferrer">Anthony Fu</a> as the <a href="https://github.com/vitest-dev/vitest/tree/main/packages/vite-node#readme" target="_blank" rel="noreferrer">vite-node</a> package to <a href="https://antfu.me/posts/dev-ssr-on-nuxt" target="_blank" rel="noreferrer">power Nuxt 3 Dev SSR</a> and later also used as the base for <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a>. So the general idea of vite-node has been battle-tested for quite some time now. This is a new iteration of the API by <a href="https://github.com/sheremet-va" target="_blank" rel="noreferrer">Vladimir Sheremet</a>, who had already re-implemented vite-node in Vitest and took the learnings to make the API even more powerful and flexible when adding it to Vite Core. The PR was one year in the makings, you can see the evolution and discussions with ecosystem maintainers <a href="https://github.com/vitejs/vite/issues/12165" target="_blank" rel="noreferrer">here</a>.</p>
<div  class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p>
<p>The Vite Runtime API evolved into the Module Runner API, released in Vite 6 as part of the <a href="/guide/api-environment.html">Environment API</a>.</p>
</div>
<h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">&#8203;</a></h2>
<h3 id="improved-support-for-css-url" tabindex="-1">Improved support for <code>.css?url</code> <a class="header-anchor" href="#improved-support-for-css-url" aria-label="Permalink to “Improved support for .css?url”">&#8203;</a></h3>
<p>Import CSS files as URLs now works reliably and correctly. This was the last remaining hurdle in Remix's move to Vite. See (<a href="https://github.com/vitejs/vite/issues/15259" target="_blank" rel="noreferrer">#15259</a>).</p>
<h3 id="build-assetsinlinelimit-now-supports-a-callback" tabindex="-1"><code>build.assetsInlineLimit</code> now supports a callback <a class="header-anchor" href="#build-assetsinlinelimit-now-supports-a-callback" aria-label="Permalink to “build.assetsInlineLimit now supports a callback”">&#8203;</a></h3>
<p>Users can now <a href="/config/build-options.html#build-assetsinlinelimit">provide a callback</a> that returns a boolean to opt-in or opt-out of inlining for specific assets. If <code>undefined</code> is returned, the default logic applies. See (<a href="https://github.com/vitejs/vite/issues/15366" target="_blank" rel="noreferrer">#15366</a>).</p>
<h3 id="improved-hmr-for-circular-import" tabindex="-1">Improved HMR for circular import <a class="header-anchor" href="#improved-hmr-for-circular-import" aria-label="Permalink to “Improved HMR for circular import”">&#8203;</a></h3>
<p>In Vite 5.0, accepted modules within circular imports always triggered a full page reload even if they can be handled fine in the client. This is now relaxed to allow HMR to apply without a full page reload, but if any error happens during HMR, the page will be reloaded. See (<a href="https://github.com/vitejs/vite/issues/15118" target="_blank" rel="noreferrer">#15118</a>).</p>
<h3 id="support-ssr-external-true-to-externalize-all-ssr-packages" tabindex="-1">Support <code>ssr.external: true</code> to externalize all SSR packages <a class="header-anchor" href="#support-ssr-external-true-to-externalize-all-ssr-packages" aria-label="Permalink to “Support ssr.external: true to externalize all SSR packages”">&#8203;</a></h3>
<p>Historically, Vite externalizes all packages except for linked packages. This new option can be used to force externalize all packages including linked packages too. This is handy in tests within monorepos where we want to emulate the usual case of all packages externalized, or when using <code>ssrLoadModule</code> to load an arbitrary file and we want to always external packages as we don't care about HMR. See (<a href="https://github.com/vitejs/vite/issues/10939" target="_blank" rel="noreferrer">#10939</a>).</p>
<h3 id="expose-close-method-in-the-preview-server" tabindex="-1">Expose <code>close</code> method in the preview server <a class="header-anchor" href="#expose-close-method-in-the-preview-server" aria-label="Permalink to “Expose close method in the preview server”">&#8203;</a></h3>
<p>The preview server now exposes a <code>close</code> method, which will properly teardown the server including all opened socket connections. See (<a href="https://github.com/vitejs/vite/issues/15630" target="_blank" rel="noreferrer">#15630</a>).</p>
<h2 id="performance-improvements" tabindex="-1">Performance improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to “Performance improvements”">&#8203;</a></h2>
<p>Vite keeps getting faster with each release, and Vite 5.1 is packed with performance improvements. We measured the loading time for 10K modules (25 level deep tree) using <a href="https://github.com/yyx990803/vite-dev-server-perf" target="_blank" rel="noreferrer">vite-dev-server-perf</a> for all minor versions from Vite 4.0. This is a good benchmark to measure the effect of Vite's bundle-less approach. Each module is a small TypeScript file with a counter and imports to other files in the tree, so this mostly measuring the time it takes to do the requests a separate modules. In Vite 4.0, loading 10K modules took 8 seconds on a M1 MAX. We had a breakthrough in <a href="./announcing-vite4-3.html">Vite 4.3 were we focused on performance</a>, and we were able to load them in 6.35 seconds. In Vite 5.1, we managed to do another performance leap. Vite is now serving the 10K modules in 5.35 seconds.</p>
<p><img src="./../images/vite5-1-10K-modules-loading-time.webp" alt="Vite 10K Modules Loading time progression" width="2184" height="1346"></p>
<p>The results of this benchmark run on Headless Puppeteer and are a good way to compare versions. They don't represent the time as experienced by users though. When running the same 10K modules in an Incognito window is Chrome, we have:</p>
<p>| 10K Modules           | Vite 5.0 | Vite 5.1 |
|</p>
]]></description>
            <content:encoded><![CDATA[<h1 id="vite-5-1-is-out" tabindex="-1">Vite 5.1 is out! <a class="header-anchor" href="#vite-5-1-is-out" aria-label="Permalink to “Vite 5.1 is out!”">&#8203;</a></h1>
<p><em>February 8, 2024</em></p>
<p><img src="/og-image-announcing-vite5-1.webp" alt="Vite 5.1 Announcement Cover Image" width="2800" height="1400"></p>
<p>Vite 5 <a href="./announcing-vite5.html">was released</a> last November, and it represented another big leap for Vite and the ecosystem. A few weeks ago we celebrated 10 million weekly npm downloads and 900 contributors to the Vite repo. Today, we're excited to announce the release of Vite 5.1.</p>
<p>Quick links: <a href="/">Docs</a>, <a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#510-2024-02-08" target="_blank" rel="noreferrer">Changelog</a></p>
<p>Docs in other languages: <a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a>, <a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>, <a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>, <a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a>, <a href="https://ko.vite.dev/" target="_blank" rel="noreferrer">한국어</a>, <a href="https://de.vite.dev/" target="_blank" rel="noreferrer">Deutsch</a></p>
<p>Try Vite 5.1 online in StackBlitz: <a href="https://vite.new/vanilla-ts" target="_blank" rel="noreferrer">vanilla</a>, <a href="https://vite.new/vue-ts" target="_blank" rel="noreferrer">vue</a>, <a href="https://vite.new/react-ts" target="_blank" rel="noreferrer">react</a>, <a href="https://vite.new/preact-ts" target="_blank" rel="noreferrer">preact</a>, <a href="https://vite.new/lit-ts" target="_blank" rel="noreferrer">lit</a>, <a href="https://vite.new/svelte-ts" target="_blank" rel="noreferrer">svelte</a>, <a href="https://vite.new/solid-ts" target="_blank" rel="noreferrer">solid</a>, <a href="https://vite.new/qwik-ts" target="_blank" rel="noreferrer">qwik</a>.</p>
<p>If you're new to Vite, we suggest reading first the <a href="/guide/">Getting Started</a> and <a href="/guide/features.html">Features</a> guides.</p>
<p>To stay up to date, follow us on <a href="https://x.com/vite_js" target="_blank" rel="noreferrer">X</a> or <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a>.</p>
<h2 id="vite-runtime-api" tabindex="-1">Vite Runtime API <a class="header-anchor" href="#vite-runtime-api" aria-label="Permalink to “Vite Runtime API”">&#8203;</a></h2>
<p>Vite 5.1 adds experimental support for a new Vite Runtime API. It allows running any code by processing it with Vite plugins first. It is different from <code>server.ssrLoadModule</code> because the runtime implementation is decoupled from the server. This lets library and framework authors implement their own layer of communication between the server and the runtime. This new API is intended to replace Vite's current SSR primitives once it is stable.</p>
<p>The new API brings many benefits:</p>
<ul>
<li>Support for HMR during SSR.</li>
<li>It is decoupled from the server, so there is no limit on how many clients can use a single server - every client has its own module cache (you can even communicate with it how you want - using message channel/fetch call/direct function call/websocket).</li>
<li>It doesn't depend on any node/bun/deno built-in APIs, so it can run in any environment.</li>
<li>It's easy to integrate with tools that have their own mechanism to run code (you can provide a runner to use <code>eval</code> instead of <code>new AsyncFunction</code> for example).</li>
</ul>
<p>The initial idea <a href="https://github.com/nuxt/vite/pull/201" target="_blank" rel="noreferrer">was proposed by Pooya Parsa</a> and implemented by <a href="https://github.com/antfu" target="_blank" rel="noreferrer">Anthony Fu</a> as the <a href="https://github.com/vitest-dev/vitest/tree/main/packages/vite-node#readme" target="_blank" rel="noreferrer">vite-node</a> package to <a href="https://antfu.me/posts/dev-ssr-on-nuxt" target="_blank" rel="noreferrer">power Nuxt 3 Dev SSR</a> and later also used as the base for <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a>. So the general idea of vite-node has been battle-tested for quite some time now. This is a new iteration of the API by <a href="https://github.com/sheremet-va" target="_blank" rel="noreferrer">Vladimir Sheremet</a>, who had already re-implemented vite-node in Vitest and took the learnings to make the API even more powerful and flexible when adding it to Vite Core. The PR was one year in the makings, you can see the evolution and discussions with ecosystem maintainers <a href="https://github.com/vitejs/vite/issues/12165" target="_blank" rel="noreferrer">here</a>.</p>
<div  class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p>
<p>The Vite Runtime API evolved into the Module Runner API, released in Vite 6 as part of the <a href="/guide/api-environment.html">Environment API</a>.</p>
</div>
<h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">&#8203;</a></h2>
<h3 id="improved-support-for-css-url" tabindex="-1">Improved support for <code>.css?url</code> <a class="header-anchor" href="#improved-support-for-css-url" aria-label="Permalink to “Improved support for .css?url”">&#8203;</a></h3>
<p>Import CSS files as URLs now works reliably and correctly. This was the last remaining hurdle in Remix's move to Vite. See (<a href="https://github.com/vitejs/vite/issues/15259" target="_blank" rel="noreferrer">#15259</a>).</p>
<h3 id="build-assetsinlinelimit-now-supports-a-callback" tabindex="-1"><code>build.assetsInlineLimit</code> now supports a callback <a class="header-anchor" href="#build-assetsinlinelimit-now-supports-a-callback" aria-label="Permalink to “build.assetsInlineLimit now supports a callback”">&#8203;</a></h3>
<p>Users can now <a href="/config/build-options.html#build-assetsinlinelimit">provide a callback</a> that returns a boolean to opt-in or opt-out of inlining for specific assets. If <code>undefined</code> is returned, the default logic applies. See (<a href="https://github.com/vitejs/vite/issues/15366" target="_blank" rel="noreferrer">#15366</a>).</p>
<h3 id="improved-hmr-for-circular-import" tabindex="-1">Improved HMR for circular import <a class="header-anchor" href="#improved-hmr-for-circular-import" aria-label="Permalink to “Improved HMR for circular import”">&#8203;</a></h3>
<p>In Vite 5.0, accepted modules within circular imports always triggered a full page reload even if they can be handled fine in the client. This is now relaxed to allow HMR to apply without a full page reload, but if any error happens during HMR, the page will be reloaded. See (<a href="https://github.com/vitejs/vite/issues/15118" target="_blank" rel="noreferrer">#15118</a>).</p>
<h3 id="support-ssr-external-true-to-externalize-all-ssr-packages" tabindex="-1">Support <code>ssr.external: true</code> to externalize all SSR packages <a class="header-anchor" href="#support-ssr-external-true-to-externalize-all-ssr-packages" aria-label="Permalink to “Support ssr.external: true to externalize all SSR packages”">&#8203;</a></h3>
<p>Historically, Vite externalizes all packages except for linked packages. This new option can be used to force externalize all packages including linked packages too. This is handy in tests within monorepos where we want to emulate the usual case of all packages externalized, or when using <code>ssrLoadModule</code> to load an arbitrary file and we want to always external packages as we don't care about HMR. See (<a href="https://github.com/vitejs/vite/issues/10939" target="_blank" rel="noreferrer">#10939</a>).</p>
<h3 id="expose-close-method-in-the-preview-server" tabindex="-1">Expose <code>close</code> method in the preview server <a class="header-anchor" href="#expose-close-method-in-the-preview-server" aria-label="Permalink to “Expose close method in the preview server”">&#8203;</a></h3>
<p>The preview server now exposes a <code>close</code> method, which will properly teardown the server including all opened socket connections. See (<a href="https://github.com/vitejs/vite/issues/15630" target="_blank" rel="noreferrer">#15630</a>).</p>
<h2 id="performance-improvements" tabindex="-1">Performance improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to “Performance improvements”">&#8203;</a></h2>
<p>Vite keeps getting faster with each release, and Vite 5.1 is packed with performance improvements. We measured the loading time for 10K modules (25 level deep tree) using <a href="https://github.com/yyx990803/vite-dev-server-perf" target="_blank" rel="noreferrer">vite-dev-server-perf</a> for all minor versions from Vite 4.0. This is a good benchmark to measure the effect of Vite's bundle-less approach. Each module is a small TypeScript file with a counter and imports to other files in the tree, so this mostly measuring the time it takes to do the requests a separate modules. In Vite 4.0, loading 10K modules took 8 seconds on a M1 MAX. We had a breakthrough in <a href="./announcing-vite4-3.html">Vite 4.3 were we focused on performance</a>, and we were able to load them in 6.35 seconds. In Vite 5.1, we managed to do another performance leap. Vite is now serving the 10K modules in 5.35 seconds.</p>
<p><img src="./../images/vite5-1-10K-modules-loading-time.webp" alt="Vite 10K Modules Loading time progression" width="2184" height="1346"></p>
<p>The results of this benchmark run on Headless Puppeteer and are a good way to compare versions. They don't represent the time as experienced by users though. When running the same 10K modules in an Incognito window is Chrome, we have:</p>
<table tabindex="0">
<thead>
<tr>
<th>10K Modules</th>
<th style="text-align:center">Vite 5.0</th>
<th style="text-align:center">Vite 5.1</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loading time</td>
<td style="text-align:center">2892ms</td>
<td style="text-align:center">2765ms</td>
</tr>
<tr>
<td>Loading time (cached)</td>
<td style="text-align:center">2778ms</td>
<td style="text-align:center">2477ms</td>
</tr>
<tr>
<td>Full reload</td>
<td style="text-align:center">2003ms</td>
<td style="text-align:center">1878ms</td>
</tr>
<tr>
<td>Full reload (cached)</td>
<td style="text-align:center">1682ms</td>
<td style="text-align:center">1604ms</td>
</tr>
</tbody>
</table>
<h3 id="run-css-preprocessors-in-threads" tabindex="-1">Run CSS preprocessors in threads <a class="header-anchor" href="#run-css-preprocessors-in-threads" aria-label="Permalink to “Run CSS preprocessors in threads”">&#8203;</a></h3>
<p>Vite now has opt-in support for running CSS preprocessors in threads. You can enable it using <a href="/config/shared-options.html#css-preprocessormaxworkers"><code>css.preprocessorMaxWorkers: true</code></a>. For a Vuetify 2 project, dev startup time was reduced by 40% with this feature enabled. There is <a href="https://github.com/vitejs/vite/pull/13584#issuecomment-1678827918" target="_blank" rel="noreferrer">performance comparison for others setups in the PR</a>. See (<a href="https://github.com/vitejs/vite/issues/13584" target="_blank" rel="noreferrer">#13584</a>). <a href="https://github.com/vitejs/vite/discussions/15835" target="_blank" rel="noreferrer">Give Feedback</a>.</p>
<h3 id="new-options-to-improve-server-cold-starts" tabindex="-1">New options to improve server cold starts <a class="header-anchor" href="#new-options-to-improve-server-cold-starts" aria-label="Permalink to “New options to improve server cold starts”">&#8203;</a></h3>
<p>You can set <code>optimizeDeps.holdUntilCrawlEnd: false</code> to switch to a new strategy for deps optimization that may help in big projects. We're considering switching to this strategy by default in the future. <a href="https://github.com/vitejs/vite/discussions/15834" target="_blank" rel="noreferrer">Give Feedback</a>. (<a href="https://github.com/vitejs/vite/issues/15244" target="_blank" rel="noreferrer">#15244</a>)</p>
<h3 id="faster-resolving-with-cached-checks" tabindex="-1">Faster resolving with cached checks <a class="header-anchor" href="#faster-resolving-with-cached-checks" aria-label="Permalink to “Faster resolving with cached checks”">&#8203;</a></h3>
<p>The <code>fs.cachedChecks</code> optimization is now enabled by default. In Windows, <code>tryFsResolve</code> was ~14x faster with it, and resolving ids overall got a ~5x speed up in the triangle benchmark. (<a href="https://github.com/vitejs/vite/issues/15704" target="_blank" rel="noreferrer">#15704</a>)</p>
<h3 id="internal-performance-improvements" tabindex="-1">Internal performance improvements <a class="header-anchor" href="#internal-performance-improvements" aria-label="Permalink to “Internal performance improvements”">&#8203;</a></h3>
<p>The dev server had several incremental performance gains. A new middleware to short-circuit on 304 (<a href="https://github.com/vitejs/vite/issues/15586" target="_blank" rel="noreferrer">#15586</a>). We avoided <code>parseRequest</code> in hot paths (<a href="https://github.com/vitejs/vite/issues/15617" target="_blank" rel="noreferrer">#15617</a>). Rollup is now properly lazy loaded (<a href="https://github.com/vitejs/vite/issues/15621" target="_blank" rel="noreferrer">#15621</a>)</p>
<h2 id="deprecations" tabindex="-1">Deprecations <a class="header-anchor" href="#deprecations" aria-label="Permalink to “Deprecations”">&#8203;</a></h2>
<p>We continue to reduce Vite's API surface where possible to make the project maintainable long term.</p>
<h3 id="deprecated-as-option-in-import-meta-glob" tabindex="-1">Deprecated <code>as</code> option in <code>import.meta.glob</code> <a class="header-anchor" href="#deprecated-as-option-in-import-meta-glob" aria-label="Permalink to “Deprecated as option in import.meta.glob”">&#8203;</a></h3>
<p>The standard moved to <a href="https://github.com/tc39/proposal-import-attributes" target="_blank" rel="noreferrer">Import Attributes</a>, but we don't plan to replace <code>as</code> with a new option at this point. Instead, it is recommended that the user switches to <code>query</code>. See (<a href="https://github.com/vitejs/vite/issues/14420" target="_blank" rel="noreferrer">#14420</a>).</p>
<h3 id="removed-experimental-build-time-pre-bundling" tabindex="-1">Removed experimental build-time pre-bundling <a class="header-anchor" href="#removed-experimental-build-time-pre-bundling" aria-label="Permalink to “Removed experimental build-time pre-bundling”">&#8203;</a></h3>
<p>Build-time pre-bundling, an experimental feature added in Vite 3, is removed. With Rollup 4 switching its parser to native, and Rolldown being worked on, both the performance and the dev-vs-build inconsistency story for this feature are no longer valid. We want to continue improving dev/build consistency, and have concluded that using Rolldown for &quot;prebundling during dev&quot; and &quot;production builds&quot; is the better bet moving forward. Rolldown may also implement caching in a way that is a lot more efficient during build than deps prebundling. See (<a href="https://github.com/vitejs/vite/issues/15184" target="_blank" rel="noreferrer">#15184</a>).</p>
<h2 id="get-involved" tabindex="-1">Get Involved <a class="header-anchor" href="#get-involved" aria-label="Permalink to “Get Involved”">&#8203;</a></h2>
<p>We are grateful to the <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">900 contributors to Vite Core</a>, and the maintainers of plugins, integrations, tools, and translations that keeps pushing the ecosystem forward. If you're enjoying Vite, we invite you to participate and help us. Check out our <a href="https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">Contributing Guide</a>, and jump into <a href="https://github.com/vitejs/vite/issues" target="_blank" rel="noreferrer">triaging issues</a>, <a href="https://github.com/vitejs/vite/pulls" target="_blank" rel="noreferrer">reviewing PRs</a>, answering questions at <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a> and helping others in the community in <a href="https://chat.vite.dev" target="_blank" rel="noreferrer">Vite Land</a>.</p>
<h2 id="acknowledgments" tabindex="-1">Acknowledgments <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “Acknowledgments”">&#8203;</a></h2>
<p>Vite 5.1 is possible thanks to our community of contributors, maintainers in the ecosystem, and the <a href="/team.html">Vite Team</a>. A shout out to the individuals and companies sponsoring Vite development. <a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a>, <a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">Nuxt Labs</a>, and <a href="https://astro.build" target="_blank" rel="noreferrer">Astro</a> for hiring Vite team members. And also to the sponsors on <a href="https://github.com/sponsors/vitejs" target="_blank" rel="noreferrer">Vite's GitHub Sponsors</a>, <a href="https://opencollective.com/vite" target="_blank" rel="noreferrer">Vite's Open Collective</a>, and <a href="https://github.com/sponsors/yyx990803" target="_blank" rel="noreferrer">Evan You's GitHub Sponsors</a>.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 5.0 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite5.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite5.html</guid>
            <pubDate>Thu, 16 Nov 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vite-5-0-is-out" tabindex="-1">Vite 5.0 发布了！ <a class="header-anchor" href="#vite-5-0-is-out" aria-label="Permalink to “Vite 5.0 发布了！”">&#8203;</a></h1>
<p><em>2023年11月16日</em></p>
<p><img src="/og-image-announcing-vite5.webp" alt="Vite 5公告封面图片" width="2480" height="1240"></p>
<p>Vite 4 发布了将近一年，它为生态系统奠定了坚实的基础。每周的 npm 下载量从250万增加到了750万，因为项目不断在共享基础设施上构建。各种框架不断创新，除了 <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro</a>、<a href="https://nuxt.com/" target="_blank" rel="noreferrer">Nuxt</a>、<a href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>、<a href="https://www.solidjs.com/blog/introducing-solidstart" target="_blank" rel="noreferrer">Solid Start</a>、<a href="https://qwik.builder.io/qwikcity/overview/" target="_blank" rel="noreferrer">Qwik City</a> 等等之外，我们看到新的框架加入并使生态系统变得更加强大。<a href="https://redwoodjs.com/" target="_blank" rel="noreferrer">RedwoodJS</a> 和 <a href="https://remix.run/" target="_blank" rel="noreferrer">Remix</a> 转向 Vite 为 React 生态系统的进一步采用铺平了道路。<a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> 的增长速度甚至比 Vite 还要快。其团队一直在努力工作，并将很快 <a href="https://github.com/vitest-dev/vitest/issues/3596" target="_blank" rel="noreferrer">发布 Vitest 1.0</a>。当与其他工具一起使用时，如 <a href="https://storybook.js.org" target="_blank" rel="noreferrer">Storybook</a>、<a href="https://nx.dev" target="_blank" rel="noreferrer">Nx</a> 和 <a href="https://playwright.dev" target="_blank" rel="noreferrer">Playwright</a>，Vite 的故事不断改善，环境也是如此，Vite 的开发在 <a href="https://deno.com" target="_blank" rel="noreferrer">Deno</a> 和 <a href="https://bun.sh" target="_blank" rel="noreferrer">Bun</a> 中都可以工作。</p>
<p>一个月前，我们举办了第二届 <a href="https://viteconf.org/23/replay" target="_blank" rel="noreferrer">ViteConf</a>，由 <a href="https://stackblitz.com" target="_blank" rel="noreferrer">StackBlitz</a> 主办。像去年一样，生态系统中的大多数项目聚在一起分享想法，并保持连接以持续扩展共同体。我们也看到新的组件补充了元框架工具包，比如 <a href="https://volarjs.dev/" target="_blank" rel="noreferrer">Volar</a> 和 <a href="https://nitro.build/" target="_blank" rel="noreferrer">Nitro</a>。Rollup 团队在同一天发布了 <a href="https://cn.rollupjs.org" target="_blank" rel="noreferrer">Rollup 4</a>，这是去年 Lukas 开创的传统。</p>
<p>六个月前，Vite 4.3 <a href="./announcing-vite4.html">发布了</a>。这个版本显著改善了开发服务器的性能。但是，还有很大的改进空间。在 ViteConf 上，<a href="https://www.youtube.com/watch?v=hrdwQHoAp0M" target="_blank" rel="noreferrer">Evan You 揭示了 Vite 的长期计划，即着手开发 Rolldown</a>，这是 Rollup 的 Rust 版本，具有兼容的 API。一旦准备就绪，我们打算在 Vite Core 中使用它，以执行 Rollup 和 esbuild 的任务。这将意味着构建性能的提升（随着我们将 Vite 本身的性能敏感部分转移到 Rust，开发性能也将在以后提升），以及减少开发和构建之间的不一致性。Rolldown 目前处于早期阶段，团队正准备在年底之前开源代码库。敬请期待！</p>
<p>今天，我们在 Vite 的道路上又迈出了一个重要的里程碑。Vite <a href="/team.html">团队</a>、<a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">贡献者</a> 和生态系统合作伙伴，很高兴地宣布发布 Vite 5。Vite 现在使用 <a href="https://github.com/vitejs/vite/pull/14508" target="_blank" rel="noreferrer">Rollup 4</a>，这已经是构建性能的重大提升。而且还有一些新选项可以改进你的开发服务器性能。</p>
<p>Vite 5 的重点是清理 API（删除已弃用的功能）并简化几个功能，解决了长期存在的问题，例如切换 <code>define</code> 以使用正确的 AST 替换而不是正则表达式。我们还在继续采取措施未来证明 Vite（现在需要 Node.js 18+，并且已经 <a href="/guide/migration.html#deprecate-cjs-node-api">弃用了 CJS Node API</a>）。</p>
<p>快速链接：</p>
<ul>
<li><a href="/">文档</a></li>
<li><a href="/guide/migration.html">迁移指南</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#500-2023-11-16" target="_blank" rel="noreferrer">变更日志</a></li>
</ul>
<p>其他语言的文档：</p>
<ul>
<li><a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a></li>
<li><a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a></li>
<li><a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a></li>
<li><a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a></li>
<li><a href="https://ko.vite.dev/" target="_blank" rel="noreferrer">한국어</a></li>
<li><a href="https://de.vite.dev/" target="_blank" rel="noreferrer">Deutsch</a>（新增翻译！）</li>
</ul>
<p>如果你是 Vite 的新用户，我们建议你先阅读 <a href="/guide/">入门指南</a> 和 <a href="/guide/features.html">功能</a> 指南。</p>
<p>我们感谢超过 <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">850 位对 Vite Core 作出贡献的贡献者</a>，以及 Vite 插件、集成、工具和翻译的维护者和贡献者，他们帮助我们达到了这一里程碑。我们鼓励你参与进来，继续与我们一起改进 Vite。你可以在我们的 <a href="https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">贡献指南</a> 中了解更多信息。要开始，我们建议你 <a href="https://github.com/vitejs/vite/issues" target="_blank" rel="noreferrer">处理问题</a>，<a href="https://github.com/vitejs/vite/pulls" target="_blank" rel="noreferrer">审查 PR</a>，基于开放的问题发送失败的测试 PR，并在 <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noreferrer">讨论</a> 和 Vite Land 的 <a href="https://discord.com/channels/804011606160703521/1019670660856942652" target="_blank" rel="noreferrer">帮助论坛</a> 中帮助其他人。你会在这个过程中学到很多，并顺利地进一步为项目做出贡献。如果你有疑问，请加入我们的 <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord 社区</a>，并在 <a href="https://discord.com/channels/804011606160703521/804439875226173480" target="_blank" rel="noreferrer">#contributing 频道</a> 上打个招呼。</p>
<p>要保持最新，请关注我们在 <a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">X</a> 或 <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a> 上的动态。</p>
<h2 id="quick-start-with-vite-5" tabindex="-1">使用 Vite 5 快速开始 <a class="header-anchor" href="#quick-start-with-vite-5" aria-label="Permalink to “使用 Vite 5 快速开始”">&#8203;</a></h2>
<p>使用 <code>pnpm create vite</code> 来创建一个 Vite 项目，并选择你喜欢的框架，或者通过在线的模板使用 <a href="https://vite.new/" target="_blank" rel="noreferrer">vite.new</a> 来体验 Vite 5。你也可以运行 <code>pnpm create vite-extra</code> 来获取其他框架和运行时的模板（如 Solid、Deno、SSR 和库的起始模板）。当你在 <code>Others</code> 选项下运行 <code>create vite</code> 时，<code>create vite-extra</code> 的模板也是可用的。</p>
<p>请注意，Vite 起始模板旨在用作测试 Vite 与不同框架的沙盒。在构建下一个项目时，我们建议使用每个框架推荐的起始模板。一些框架现在在 <code>create vite</code> 中也重定向到它们的起始模板（Vue 的 <code>create-vue</code> 和 <code>Nuxt 3</code>，以及 Svelte 的 <code>SvelteKit</code>）。</p>
<h2 id="node-js-support" tabindex="-1">Node.js 支持 <a class="header-anchor" href="#node-js-support" aria-label="Permalink to “Node.js 支持”">&#8203;</a></h2>
<p>Vite 不再支持已达到 EOL 的 Node.js 14 / 16 / 17 / 19。现在需要 Node.js 18 / 20+。</p>
<h2 id="performance" tabindex="-1">性能方面 <a class="header-anchor" href="#performance" aria-label="Permalink to “性能方面”">&#8203;</a></h2>
<p>除了 Rollup 4 的构建性能改进之外，现在还有一个新指南，帮助你识别和修复常见的性能问题，网址为 <a href="/guide/performance.html">https://vite.dev/guide/performance</a>。</p>
<p>Vite 5 还引入了 <a href="/guide/performance.html#warm-up-frequently-used-files">server.warmup</a>，这是一个新功能，用于改善启动时间。它允许你定义一个模块列表，在服务器启动时应预先转换。当使用 <a href="/config/server-options.html#server-open"><code>--open</code> 或 <code>server.open</code></a> 时，Vite 还将自动预热你的应用程序的入口点或提供的要打开的 URL。</p>
<h2 id="main-changes" tabindex="-1">主要变化 <a class="header-anchor" href="#main-changes" aria-label="Permalink to “主要变化”">&#8203;</a></h2>
<ul>
<li><a href="/guide/migration.html#rollup-4">Vite is now powered by Rollup 4</a></li>
<li><a href="/guide/migration.html#deprecate-cjs-node-api">The CJS Node API has been deprecated</a></li>
<li><a href="/guide/migration.html#rework-define-and-import-meta-env-replacement-strategy">Rework <code>define</code> and <code>import.meta.env.*</code> replacement strategy</a></li>
<li><a href="/guide/migration.html#ssr-externalized-modules-value-now-matches-production">SSR externalized modules value now matches production</a></li>
<li><a href="/guide/migration.html#worker-plugins-is-now-a-function"><code>worker.plugins</code> is now a function</a></li>
<li><a href="/guide/migration.html#allow-path-containing-to-fallback-to-index-html">Allow path containing <code>.</code> to fallback to index.html</a></li>
<li><a href="/guide/migration.html#align-dev-and-preview-html-serving-behaviour">Align dev and preview HTML serving behavior</a></li>
<li><a href="/guide/migration.html#manifest-files-are-now-generated-in-vite-directory-by-default">Manifest files are now generated in <code>.vite</code> directory by default</a></li>
<li><a href="/guide/migration.html#cli-shortcuts-require-an-additional-enter-press">CLI shortcuts require an additional <code>Enter</code> press</a></li>
<li><a href="/guide/migration.html#update-experimentaldecorators-and-usedefineforclassfields-typescript-behaviour">Update <code>experimentalDecorators</code> and <code>useDefineForClassFields</code> TypeScript behavior</a></li>
<li><a href="/guide/migration.html#remove-https-flag-and-https-true">Remove <code>--https</code> flag and <code>https: true</code></a></li>
<li><a href="/guide/migration.html#remove-resolvepackageentry-and-resolvepackagedata-apis">Remove <code>resolvePackageEntry</code> and <code>resolvePackageData</code> APIs</a></li>
<li><a href="/guide/migration.html#removed-deprecated-apis">Removes previously deprecated APIs</a></li>
<li><a href="/guide/migration.html#advanced">Read more about advanced changes affecting plugin and tool authors</a></li>
</ul>
<h2 id="migrating-to-vite-5" tabindex="-1">迁移到 Vite 5 <a class="header-anchor" href="#migrating-to-vite-5" aria-label="Permalink to “迁移到 Vite 5”">&#8203;</a></h2>
<p>我们与生态系统合作伙伴合作，确保平稳迁移到这个新的主要版本。再次感谢 <a href="https://www.youtube.com/watch?v=7L4I4lDzO48" target="_blank" rel="noreferrer">vite-ecosystem-ci</a>，它对我们进行更大胆的改变并避免回退起到了关键作用。我们很高兴看到其他生态系统采用类似的方案，以改善其项目与下游维护者之间的协作。</p>
<p>对于大多数项目来说，升级到 Vite 5 应该是直截了当的。但我们建议在升级之前查看 <a href="/guide/migration.html">详细的迁移指南</a>。</p>
<p>你可以在 <a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#500-2023-11-16" target="_blank" rel="noreferrer">Vite 5 变更日志</a> 中找到对 Vite 核心的全面变更列表。</p>
<h2 id="acknowledgments" tabindex="-1">致谢 <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “致谢”">&#8203;</a></h2>
<p>Vite 5 是我们社区的贡献者、下游维护者、插件作者和 <a href="/team.html">Vite 团队</a> 长时间工作的结果。特别感谢 <a href="https://twitter.com/bluwyoo" target="_blank" rel="noreferrer">Bjorn Lu</a> 在这个主要版本的发布过程中的领导。</p>
<p>我们还要感谢个人和公司对 Vite 开发的赞助。<a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a>、<a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">Nuxt Labs</a> 和 <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro</a> 继续通过雇佣 Vite 团队成员来投资 Vite。向 <a href="https://github.com/sponsors/vitejs" target="_blank" rel="noreferrer">Vite</a>、<a href="https://opencollective.com/vite" target="_blank" rel="noreferrer">Vite 的 Open Collective</a> 和 <a href="https://github.com/sponsors/yyx990803" target="_blank" rel="noreferrer">Evan You</a> 的赞助者表示感谢。特别感谢 <a href="https://remix.run/" target="_blank" rel="noreferrer">Remix</a> 成为金牌赞助商，并在转向 Vite 后回馈社区。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 4.3 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite4-3.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite4-3.html</guid>
            <pubDate>Thu, 20 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[<h1 id="vite-4-3-is-out" tabindex="-1">Vite 4.3 is out! <a class="header-anchor" href="#vite-4-3-is-out" aria-label="Permalink to “Vite 4.3 is out!”">&#8203;</a></h1>
<p><em>April 20, 2023</em></p>
<p><img src="/og-image-announcing-vite4-3.webp" alt="Vite 4.3 Announcement Cover Image" width="2000" height="1002"></p>
<p>Quick links:</p>
<ul>
<li>Docs: <a href="/">English</a>, <a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a>, <a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>, <a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>, <a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#430-2023-04-20" target="_blank" rel="noreferrer">Vite 4.3 Changelog</a></li>
</ul>
<h2 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to “Performance Improvements”">&#8203;</a></h2>
<p>In this minor, we focused on improving the dev server performance. The resolve logic got streamlined, improving hot paths and implementing smarter caching for finding <code>package.json</code>, TS config files, and resolved URL in general.</p>
<p>You can read a detailed walkthrough of the performance work done in this blog post by one of Vite Contributors: <a href="https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html" target="_blank" rel="noreferrer">How we made Vite 4.3 faaaaster 🚀</a>.</p>
<p>This sprint resulted in speed improvements across the board compared to Vite 4.2.</p>
<p>These are the performance improvements as measured by <a href="https://github.com/sapphi-red/performance-compare" target="_blank" rel="noreferrer">sapphi-red/performance-compare</a>, which tests an app with 1000 React Components cold and warm dev server startup time as well as HMR times for a root and a leaf component:</p>
<p>| <strong>Vite (babel)</strong>   |  Vite 4.2 | Vite 4.3 | Improvement |
| :</p>
]]></description>
            <content:encoded><![CDATA[<h1 id="vite-4-3-is-out" tabindex="-1">Vite 4.3 is out! <a class="header-anchor" href="#vite-4-3-is-out" aria-label="Permalink to “Vite 4.3 is out!”">&#8203;</a></h1>
<p><em>April 20, 2023</em></p>
<p><img src="/og-image-announcing-vite4-3.webp" alt="Vite 4.3 Announcement Cover Image" width="2000" height="1002"></p>
<p>Quick links:</p>
<ul>
<li>Docs: <a href="/">English</a>, <a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a>, <a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a>, <a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a>, <a href="https://pt.vite.dev/" target="_blank" rel="noreferrer">Português</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#430-2023-04-20" target="_blank" rel="noreferrer">Vite 4.3 Changelog</a></li>
</ul>
<h2 id="performance-improvements" tabindex="-1">Performance Improvements <a class="header-anchor" href="#performance-improvements" aria-label="Permalink to “Performance Improvements”">&#8203;</a></h2>
<p>In this minor, we focused on improving the dev server performance. The resolve logic got streamlined, improving hot paths and implementing smarter caching for finding <code>package.json</code>, TS config files, and resolved URL in general.</p>
<p>You can read a detailed walkthrough of the performance work done in this blog post by one of Vite Contributors: <a href="https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html" target="_blank" rel="noreferrer">How we made Vite 4.3 faaaaster 🚀</a>.</p>
<p>This sprint resulted in speed improvements across the board compared to Vite 4.2.</p>
<p>These are the performance improvements as measured by <a href="https://github.com/sapphi-red/performance-compare" target="_blank" rel="noreferrer">sapphi-red/performance-compare</a>, which tests an app with 1000 React Components cold and warm dev server startup time as well as HMR times for a root and a leaf component:</p>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left"><strong>Vite (babel)</strong></th>
<th style="text-align:right">Vite 4.2</th>
<th style="text-align:right">Vite 4.3</th>
<th style="text-align:right">Improvement</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>dev cold start</strong></td>
<td style="text-align:right">17249.0ms</td>
<td style="text-align:right">5132.4ms</td>
<td style="text-align:right">-70.2%</td>
</tr>
<tr>
<td style="text-align:left"><strong>dev warm start</strong></td>
<td style="text-align:right">6027.8ms</td>
<td style="text-align:right">4536.1ms</td>
<td style="text-align:right">-24.7%</td>
</tr>
<tr>
<td style="text-align:left"><strong>Root HMR</strong></td>
<td style="text-align:right">46.8ms</td>
<td style="text-align:right">26.7ms</td>
<td style="text-align:right">-42.9%</td>
</tr>
<tr>
<td style="text-align:left"><strong>Leaf HMR</strong></td>
<td style="text-align:right">27.0ms</td>
<td style="text-align:right">12.9ms</td>
<td style="text-align:right">-52.2%</td>
</tr>
</tbody>
</table>
<table tabindex="0">
<thead>
<tr>
<th style="text-align:left"><strong>Vite (swc)</strong></th>
<th style="text-align:right">Vite 4.2</th>
<th style="text-align:right">Vite 4.3</th>
<th style="text-align:right">Improvement</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>dev cold start</strong></td>
<td style="text-align:right">13552.5ms</td>
<td style="text-align:right">3201.0ms</td>
<td style="text-align:right">-76.4%</td>
</tr>
<tr>
<td style="text-align:left"><strong>dev warm start</strong></td>
<td style="text-align:right">4625.5ms</td>
<td style="text-align:right">2834.4ms</td>
<td style="text-align:right">-38.7%</td>
</tr>
<tr>
<td style="text-align:left"><strong>Root HMR</strong></td>
<td style="text-align:right">30.5ms</td>
<td style="text-align:right">24.0ms</td>
<td style="text-align:right">-21.3%</td>
</tr>
<tr>
<td style="text-align:left"><strong>Leaf HMR</strong></td>
<td style="text-align:right">16.9ms</td>
<td style="text-align:right">10.0ms</td>
<td style="text-align:right">-40.8%</td>
</tr>
</tbody>
</table>
<p><img src="./../images/vite4-3-startup-time.webp" alt="Vite 4.3 vs 4.2 startup time comparison" width="1600" height="1178"></p>
<p><img src="./../images/vite4-3-hmr-time.webp" alt="Vite 4.3 vs 4.2 HMR time comparison" width="1600" height="1178"></p>
<p>You can read more information about the benchmark <a href="https://gist.github.com/sapphi-red/25be97327ee64a3c1dce793444afdf6e" target="_blank" rel="noreferrer">here</a>. Specs and Versions for this performance run:</p>
<ul>
<li>CPU: Ryzen 9 5900X, Memory: DDR4-3600 32GB, SSD: WD Blue SN550 NVME SSD</li>
<li>Windows 10 Pro 21H2 19044.2846</li>
<li>Node.js 18.16.0</li>
<li>Vite and React Plugin versions
<ul>
<li>Vite 4.2 (babel): Vite 4.2.1 + plugin-react 3.1.0</li>
<li>Vite 4.3 (babel): Vite 4.3.0 + plugin-react 4.0.0-beta.1</li>
<li>Vite 4.2 (swc): Vite 4.2.1 + plugin-react-swc 3.2.0</li>
<li>Vite 4.3 (swc): Vite 4.3.0 + plugin-react-swc 3.3.0</li>
</ul>
</li>
</ul>
<p>Early adopters have also reported seeing 1.5x-2x dev startup time improvement on real apps while testing the Vite 4.3 beta. We'd love to know the results for your apps.</p>
<h2 id="profiling" tabindex="-1">Profiling <a class="header-anchor" href="#profiling" aria-label="Permalink to “Profiling”">&#8203;</a></h2>
<p>We'll continue to work on Vite's performance. We're working on an official <a href="https://github.com/vitejs/vite-benchmark" target="_blank" rel="noreferrer">Benchmark tool</a> for Vite that let us get performance metrics for each Pull Request.</p>
<p>And <a href="https://github.com/antfu/vite-plugin-inspect" target="_blank" rel="noreferrer">vite-plugin-inspect</a> now has more performance-related features to help you identify which plugins or middlewares are the bottleneck for your applications.</p>
<p>Using <code>vite --profile</code> (and then pressing <code>p</code>) once the page loads will save a CPU profile of the dev server startup. You can open them in an app as <a href="https://www.speedscope.app/" target="_blank" rel="noreferrer">speedscope</a> to identify performance issues. And you can share your findings with the Vite Team in a <a href="https://github.com/vitejs/vite/discussions" target="_blank" rel="noreferrer">Discussion</a> or in <a href="https://chat.vite.dev" target="_blank" rel="noreferrer">Vite's Discord</a>.</p>
<h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to “Next Steps”">&#8203;</a></h2>
<p>We decided to do a single Vite Major this year aligning with the <a href="https://endoflife.date/nodejs" target="_blank" rel="noreferrer">EOL of Node.js 16</a> in September, dropping support for both Node.js 14 and 16 in it. If you would like to get involved, we started a <a href="https://github.com/vitejs/vite/discussions/12466" target="_blank" rel="noreferrer">Vite 5 Discussion</a> to gather early feedback.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 4.0 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite4.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite4.html</guid>
            <pubDate>Fri, 09 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="vite-4-0-is-out" tabindex="-1">Vite 4.0 is out! <a class="header-anchor" href="#vite-4-0-is-out" aria-label="Permalink to “Vite 4.0 is out!”">&#8203;</a></h1>
<p><em>December 9, 2022</em> - Check out the <a href="./announcing-vite5.html">Vite 5.0 announcement</a></p>
<p>Vite 3 <a href="./announcing-vite3.html">was released</a> five months ago. npm downloads per week have gone from 1 million to 2.5 million since then. The ecosystem has matured too, and continues to grow. In this year's <a href="https://twitter.com/vite_js/status/1589665610119585793" target="_blank" rel="noreferrer">Jamstack Conf survey</a>, usage among the community jumped from 14% to 32% while keeping a high 9.7 satisfaction score. We saw the stable releases of <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro 1.0</a>, <a href="https://v3.nuxtjs.org/" target="_blank" rel="noreferrer">Nuxt 3</a>, and other Vite-powered frameworks that are innovating and collaborating: <a href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>, <a href="https://www.solidjs.com/blog/introducing-solidstart" target="_blank" rel="noreferrer">Solid Start</a>, <a href="https://qwik.builder.io/qwikcity/overview/" target="_blank" rel="noreferrer">Qwik City</a>. Storybook announced first-class support for Vite as one of its main features for <a href="https://storybook.js.org/blog/first-class-vite-support-in-storybook/" target="_blank" rel="noreferrer">Storybook 7.0</a>. Deno now <a href="https://www.youtube.com/watch?v=Zjojo9wdvmY" target="_blank" rel="noreferrer">supports Vite</a>. <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> adoption is exploding, it will soon represent half of Vite's npm downloads. Nx is also investing in the ecosystem, and <a href="https://nx.dev/packages/vite" target="_blank" rel="noreferrer">officially supports Vite</a>.</p>
<p><a href="https://viteconf.org/2022/replay" target="_blank" rel="noreferrer"><img src="./../images/ecosystem-vite4.webp" alt="Vite 4 Ecosystem" width="3360" height="1682"></a></p>
<p>As a showcase of the growth Vite and related projects have experienced, the Vite ecosystem gathered on October 11th at <a href="https://viteconf.org/2022/replay" target="_blank" rel="noreferrer">ViteConf 2022</a>. We saw representatives from the main web framework and tools tell stories of innovation and collaboration. And in a symbolic move, the Rollup team choose that exact day to release <a href="https://cn.rollupjs.org" target="_blank" rel="noreferrer">Rollup 3</a>.</p>
<p>Today, the Vite <a href="https://vite.dev/team" target="_blank" rel="noreferrer">team</a> with the help of our ecosystem partners, is happy to announce the release of Vite 4, powered during build time by Rollup 3. We've worked with the ecosystem to ensure a smooth upgrade path for this new major. Vite is now using <a href="https://github.com/vitejs/vite/issues/9870" target="_blank" rel="noreferrer">Rollup 3</a>, which allowed us to simplify Vite's internal asset handling and has many improvements. See the <a href="https://github.com/rollup/rollup/releases/tag/v3.0.0" target="_blank" rel="noreferrer">Rollup 3 release notes here</a>.</p>
<p><img src="/og-image-announcing-vite4.webp" alt="Vite 4 Announcement Cover Image" width="2800" height="1406"></p>
<p>Quick links:</p>
<ul>
<li><a href="/">Docs</a></li>
<li><a href="https://v4.vite.dev/guide/migration.html" target="_blank" rel="noreferrer">Migration Guide</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#400-2022-12-09" target="_blank" rel="noreferrer">Changelog</a></li>
</ul>
<p>Docs in other languages:</p>
<ul>
<li><a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a></li>
<li><a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a></li>
<li><a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a></li>
</ul>
<p>If you recently started using Vite, we suggest reading the <a href="https://vite.dev/guide/why.html" target="_blank" rel="noreferrer">Why Vite Guide</a> and checking out <a href="https://vite.dev/guide/" target="_blank" rel="noreferrer">the Getting Started</a> and <a href="https://vite.dev/guide/features" target="_blank" rel="noreferrer">Features guide</a>. If you want to get involved, contributions are welcome at <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">GitHub</a>. Almost <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">700 collaborators</a> have contributed to Vite. Follow the updates on <a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">Twitter</a> and <a href="https://webtoo.ls/@vite" target="_blank" rel="noreferrer">Mastodon</a>, or join collaborate with others on our <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord community</a>.</p>
<h2 id="start-playing-with-vite-4" tabindex="-1">Start playing with Vite 4 <a class="header-anchor" href="#start-playing-with-vite-4" aria-label="Permalink to “Start playing with Vite 4”">&#8203;</a></h2>
<p>Use <code>pnpm create vite</code> to scaffold a Vite project with your preferred framework, or open a started template online to play with Vite 4 using <a href="https://vite.new" target="_blank" rel="noreferrer">vite.new</a>.</p>
<p>You can also run <code>pnpm create vite-extra</code> to get access to templates from other frameworks and runtimes (Solid, Deno, SSR, and library starters). <code>create vite-extra</code> templates are also available when you run <code>create vite</code> under the <code>Others</code> option.</p>
<p>Note that Vite starter templates are intended to be used as a playground to test Vite with different frameworks. When building your next project, we recommend reaching out to the starters recommended by each framework. Some frameworks now redirect in <code>create vite</code> to their starters too (<code>create-vue</code> and <code>Nuxt 3</code> for Vue, and <code>SvelteKit</code> for Svelte).</p>
<h2 id="new-react-plugin-using-swc-during-development" tabindex="-1">New React plugin using SWC during development <a class="header-anchor" href="#new-react-plugin-using-swc-during-development" aria-label="Permalink to “New React plugin using SWC during development”">&#8203;</a></h2>
<p><a href="https://swc.rs/" target="_blank" rel="noreferrer">SWC</a> is now a mature replacement for <a href="https://babeljs.io/" target="_blank" rel="noreferrer">Babel</a>, especially in the context of React projects. SWC's React Fast Refresh implementation is a lot faster than Babel, and for some projects, it is now a better alternative. From Vite 4, two plugins are available for React projects with different tradeoffs. We believe that both approaches are worth supporting at this point, and we'll continue to explore improvements to both plugins in the future.</p>
<h3 id="vitejs-plugin-react" tabindex="-1">@vitejs/plugin-react <a class="header-anchor" href="#vitejs-plugin-react" aria-label="Permalink to “@vitejs/plugin-react”">&#8203;</a></h3>
<p><a href="https://github.com/vitejs/vite-plugin-react" target="_blank" rel="noreferrer">@vitejs/plugin-react</a> is a plugin that uses esbuild and Babel, achieving fast HMR with a small package footprint and the flexibility of being able to use the Babel transform pipeline.</p>
<h3 id="vitejs-plugin-react-swc-new" tabindex="-1">@vitejs/plugin-react-swc (new) <a class="header-anchor" href="#vitejs-plugin-react-swc-new" aria-label="Permalink to “@vitejs/plugin-react-swc (new)”">&#8203;</a></h3>
<p><a href="https://github.com/vitejs/vite-plugin-react-swc" target="_blank" rel="noreferrer">@vitejs/plugin-react-swc</a> is a new plugin that uses esbuild during build, but replaces Babel with SWC during development. For big projects that don't require non-standard React extensions, cold start and Hot Module Replacement (HMR) can be significantly faster.</p>
<h2 id="browser-compatibility" tabindex="-1">Browser Compatibility <a class="header-anchor" href="#browser-compatibility" aria-label="Permalink to “Browser Compatibility”">&#8203;</a></h2>
<p>The modern browser build now targets <code>safari14</code> by default for wider ES2020 compatibility. This means that modern builds can now use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noreferrer"><code>BigInt</code></a> and that the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing" target="_blank" rel="noreferrer">nullish coalescing operator</a> isn't transpiled anymore. If you need to support older browsers, you can add <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer"><code>@vitejs/plugin-legacy</code></a> as usual.</p>
<h2 id="importing-css-as-a-string" tabindex="-1">Importing CSS as a String <a class="header-anchor" href="#importing-css-as-a-string" aria-label="Permalink to “Importing CSS as a String”">&#8203;</a></h2>
<p>In Vite 3, importing the default export of a <code>.css</code> file could introduce a double loading of CSS.</p>
<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> cssString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './global.css'</span></span></code></pre>
</div><p>This double loading could occur since a <code>.css</code> file will be emitted and it's likely that the CSS string will also be used by the application code — for example, injected by the framework runtime. From Vite 4, the <code>.css</code> default export <a href="https://github.com/vitejs/vite/issues/11094" target="_blank" rel="noreferrer">has been deprecated</a>. The <code>?inline</code> query suffix modifier needs to be used in this case, as that doesn't emit the imported <code>.css</code> styles.</p>
<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> stuff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './global.css?inline'</span></span></code></pre>
</div><p>Learn more in the <a href="https://v4.vite.dev/guide/migration.html" target="_blank" rel="noreferrer">Migration Guide</a>.</p>
<h2 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to “Environment Variables”">&#8203;</a></h2>
<p>Vite now uses <code>dotenv</code> 16 and <code>dotenv-expand</code> 9 (previously <code>dotenv</code> 14 and <code>dotenv-expand</code> 5). If you have a value including <code>#</code> or <code>`</code>, you will need to wrap them with quotes.</p>
<div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7">-VITE_APP=ab#cd`ef</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D">+VITE_APP="ab#cd`ef"</span></span></code></pre>
</div><p>For more details, see the <a href="https://github.com/motdotla/dotenv/blob/master/CHANGELOG.md" target="_blank" rel="noreferrer"><code>dotenv</code></a> and <a href="https://github.com/motdotla/dotenv-expand/blob/master/CHANGELOG.md" target="_blank" rel="noreferrer"><code>dotenv-expand</code> changelog</a>.</p>
<h2 id="other-features" tabindex="-1">Other Features <a class="header-anchor" href="#other-features" aria-label="Permalink to “Other Features”">&#8203;</a></h2>
<ul>
<li>CLI Shortcuts (press <code>h</code> during dev to see them all) (<a href="https://github.com/vitejs/vite/pull/11228" target="_blank" rel="noreferrer">#11228</a>)</li>
<li>Support for patch-package when pre bundling dependencies (<a href="https://github.com/vitejs/vite/issues/10286" target="_blank" rel="noreferrer">#10286</a>)</li>
<li>Cleaner build logs output (<a href="https://github.com/vitejs/vite/issues/10895" target="_blank" rel="noreferrer">#10895</a>) and switch to <code>kB</code> to align with browser dev tools (<a href="https://github.com/vitejs/vite/issues/10982" target="_blank" rel="noreferrer">#10982</a>)</li>
<li>Improved error messages during SSR (<a href="https://github.com/vitejs/vite/issues/11156" target="_blank" rel="noreferrer">#11156</a>)</li>
</ul>
<h2 id="reduced-package-size" tabindex="-1">Reduced Package Size <a class="header-anchor" href="#reduced-package-size" aria-label="Permalink to “Reduced Package Size”">&#8203;</a></h2>
<p>Vite cares about its footprint, to speed up installation, especially in the use case of playgrounds for documentation and reproductions. And once more, this major brings improvements in Vite's package size. Vite 4 install size is 23% smaller compared to vite 3.2.5 (14.1 MB vs 18.3 MB).</p>
<h2 id="upgrades-to-vite-core" tabindex="-1">Upgrades to Vite Core <a class="header-anchor" href="#upgrades-to-vite-core" aria-label="Permalink to “Upgrades to Vite Core”">&#8203;</a></h2>
<p><a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">Vite Core</a> and <a href="https://github.com/vitejs/vite-ecosystem-ci" target="_blank" rel="noreferrer">vite-ecosystem-ci</a> continue to evolve to provide a better experience to maintainers and collaborators and to ensure that Vite development scales to cope with the growth in the ecosystem.</p>
<h3 id="framework-plugins-out-of-core" tabindex="-1">Framework plugins out of core <a class="header-anchor" href="#framework-plugins-out-of-core" aria-label="Permalink to “Framework plugins out of core”">&#8203;</a></h3>
<p><a href="https://github.com/vitejs/vite-plugin-vue" target="_blank" rel="noreferrer"><code>@vitejs/plugin-vue</code></a> and <a href="https://github.com/vitejs/vite-plugin-react" target="_blank" rel="noreferrer"><code>@vitejs/plugin-react</code></a> have been part of Vite core monorepo since the first versions of Vite. This helped us to get a close feedback loop when making changes as we were getting both Core and the plugins tested and released together. With <a href="https://github.com/vitejs/vite-ecosystem-ci" target="_blank" rel="noreferrer">vite-ecosystem-ci</a> we can get this feedback with these plugins developed on independent repositories, so from Vite 4, <a href="https://github.com/vitejs/vite/pull/11158" target="_blank" rel="noreferrer">they have been moved out of the Vite core monorepo</a>. This is meaningful for Vite's framework-agnostic story and will allow us to build independent teams to maintain each of the plugins. If you have bugs to report or features to request, please create issues on the new repositories moving forward: <a href="https://github.com/vitejs/vite-plugin-vue" target="_blank" rel="noreferrer"><code>vitejs/vite-plugin-vue</code></a> and <a href="https://github.com/vitejs/vite-plugin-react" target="_blank" rel="noreferrer"><code>vitejs/vite-plugin-react</code></a>.</p>
<h3 id="vite-ecosystem-ci-improvements" tabindex="-1">vite-ecosystem-ci improvements <a class="header-anchor" href="#vite-ecosystem-ci-improvements" aria-label="Permalink to “vite-ecosystem-ci improvements”">&#8203;</a></h3>
<p><a href="https://github.com/vitejs/vite-ecosystem-ci" target="_blank" rel="noreferrer">vite-ecosystem-ci</a> extends Vite's CI by providing on-demand status reports on the state of the CIs of <a href="https://github.com/vitejs/vite-ecosystem-ci/tree/main/tests" target="_blank" rel="noreferrer">most major downstream projects</a>. We run vite-ecosystem-ci three times a week against Vite's main branch and receive timely reports before introducing a regression. Vite 4 will soon be compatible with most projects using Vite, which already prepared branches with the needed changes and will be releasing them in the next few days. We are also able to run vite-ecosystem-ci on-demand on PRs using <code>/ecosystem-ci run</code> in a comment, allowing us to know <a href="https://github.com/vitejs/vite/pull/11269#issuecomment-1343365064" target="_blank" rel="noreferrer">the effect of changes</a> before they hit main.</p>
<h2 id="acknowledgments" tabindex="-1">Acknowledgments <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “Acknowledgments”">&#8203;</a></h2>
<p>Vite 4 wouldn't be possible without uncountable hours of work by Vite contributors, many of them maintainers of downstream projects and plugins, and the efforts of the <a href="/team.html">Vite Team</a>. All of us have worked together to improve Vite's DX once more, for every framework and app using it. We're grateful to be able to improve a common base for such a vibrant ecosystem.</p>
<p>We're also thankful to individuals and companies sponsoring the Vite team, and companies investing directly in Vite's future: <a href="https://twitter.com/antfu7" target="_blank" rel="noreferrer">@antfu7</a>'s work on Vite and the ecosystem is part of his job at <a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">Nuxt Labs</a>, <a href="https://astro.build" target="_blank" rel="noreferrer">Astro</a> is funding <a href="https://twitter.com/bluwyoo" target="_blank" rel="noreferrer">@bluwyoo</a>'s' Vite core work, and <a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a> hires <a href="https://twitter.com/patak_dev" target="_blank" rel="noreferrer">@patak_dev</a> to work full time on Vite.</p>
<h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to “Next steps”">&#8203;</a></h2>
<p>Our immediate focus would be on triaging newly opened issues to avoid disruption by possible regressions. If you would like to get involved and help us improve Vite, we suggest starting with issues triaging. Join <a href="https://chat.vite.dev" target="_blank" rel="noreferrer">our Discord</a> and reach out on the <code>#contributing</code> channel. Polish our <code>#docs</code> story, and <code>#help</code> others. We need to continue to build a helpful and welcoming community for the next wave of users, as Vite's adoption continues to grow.</p>
<p>There are a lot of open fronts to keep improving the DX of everyone that has chosen Vite to power their frameworks and develop their apps. Onwards!</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vite 3.0 is out!]]></title>
            <link>https://vite.dev/blog/announcing-vite3.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite3.html</guid>
            <pubDate>Sat, 23 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[<h1 id="vite-3-0-is-out" tabindex="-1">Vite 3.0 is out! <a class="header-anchor" href="#vite-3-0-is-out" aria-label="Permalink to “Vite 3.0 is out!”">&#8203;</a></h1>
<p><em>July 23, 2022</em> - Check out the <a href="./announcing-vite4.html">Vite 4.0 announcement</a></p>
<p>In February last year, <a href="https://twitter.com/youyuxi" target="_blank" rel="noreferrer">Evan You</a> released Vite 2. Since then, its adoption has grown non-stop, reaching more than 1 million npm downloads per week. A sprawling ecosystem rapidly formed after the release. Vite is powering a renewed innovation race in Web frameworks. <a href="https://v3.nuxtjs.org/" target="_blank" rel="noreferrer">Nuxt 3</a> uses Vite by default. <a href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>, <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro</a>, <a href="https://hydrogen.shopify.dev/" target="_blank" rel="noreferrer">Hydrogen</a>, and <a href="https://docs.solidjs.com/quick-start" target="_blank" rel="noreferrer">SolidStart</a> are all built with Vite. <a href="https://laravel.com/docs/9.x/vite" target="_blank" rel="noreferrer">Laravel has now decided to use Vite by default</a>. <a href="https://vite-ruby.netlify.app/" target="_blank" rel="noreferrer">Vite Ruby</a> shows how Vite can improve Rails DX. <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> is making strides as a Vite-native alternative to Jest. Vite is behind <a href="https://docs.cypress.io/guides/component-testing/writing-your-first-component-test" target="_blank" rel="noreferrer">Cypress</a> and <a href="https://playwright.dev/docs/test-components" target="_blank" rel="noreferrer">Playwright</a>'s new Component Testing features, Storybook has <a href="https://github.com/storybookjs/builder-vite" target="_blank" rel="noreferrer">Vite as an official builder</a>. And <a href="https://patak.dev/vite/ecosystem.html" target="_blank" rel="noreferrer">the list goes on</a>. Maintainers from most of these projects got involved in improving the Vite core itself, working closely with the Vite <a href="https://vite.dev/team" target="_blank" rel="noreferrer">team</a> and other contributors.</p>
<p><img src="/og-image-announcing-vite3.webp" alt="Vite 3 Announcement Cover Image" width="2400" height="1200"></p>
<p>Today, 16 months from the v2 launch we are happy to announce the release of Vite 3. We decided to release a new Vite major at least every year to align with <a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noreferrer">Node.js's EOL</a>, and take the opportunity to review Vite's API regularly with a short migration path for projects in the ecosystem.</p>
<p>Quick links:</p>
<ul>
<li><a href="/">Docs</a></li>
<li><a href="https://v3.vite.dev/guide/migration.html" target="_blank" rel="noreferrer">Migration Guide</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#300-2022-07-13" target="_blank" rel="noreferrer">Changelog</a></li>
</ul>
<p>If you are new to Vite, we recommend reading the <a href="https://vite.dev/guide/why.html" target="_blank" rel="noreferrer">Why Vite Guide</a>. Then check out <a href="https://vite.dev/guide/" target="_blank" rel="noreferrer">the Getting Started</a> and <a href="https://vite.dev/guide/features" target="_blank" rel="noreferrer">Features guide</a> to see what Vite provides out of the box. As usual, contributions are welcome at <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">GitHub</a>. More than <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">600 collaborators</a> have helped improve Vite so far. Follow the updates on <a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">Twitter</a>, or join discussions with other Vite users on our <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord chat server</a>.</p>
<h2 id="new-documentation" tabindex="-1">New Documentation <a class="header-anchor" href="#new-documentation" aria-label="Permalink to “New Documentation”">&#8203;</a></h2>
<p>Go to <a href="https://vite.dev" target="_blank" rel="noreferrer">vite.dev</a> to enjoy the new v3 docs. Vite is now using the new <a href="https://vitepress.vuejs.org" target="_blank" rel="noreferrer">VitePress</a> default theme, with a stunning dark mode between other features.</p>
<p><a href="https://vite.dev" target="_blank" rel="noreferrer"><img src="./../images/v3-docs.webp" alt="Vite documentation frontpage" width="2308" height="854"></a></p>
<p>Several projects in the ecosystem have already migrated to it (see <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a>, <a href="https://vite-plugin-pwa.netlify.app/" target="_blank" rel="noreferrer">vite-plugin-pwa</a>, and <a href="https://vitepress.vuejs.org/" target="_blank" rel="noreferrer">VitePress</a> itself).</p>
<p>If you need to access the Vite 2 docs, they will remain online at <a href="https://v2.vite.dev" target="_blank" rel="noreferrer">v2.vite.dev</a>. There is also a new <a href="https://main.vite.dev" target="_blank" rel="noreferrer">main.vite.dev</a> subdomain, where each commit to Vite’s main branch is auto deployed. This is useful when testing beta versions or contributing to the core’s development.</p>
<p>There is also now an official Spanish translation, that has been added to the previous Chinese and Japanese translations:</p>
<ul>
<li><a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a></li>
<li><a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a></li>
<li><a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a></li>
</ul>
<h2 id="create-vite-starter-templates" tabindex="-1">Create Vite Starter Templates <a class="header-anchor" href="#create-vite-starter-templates" aria-label="Permalink to “Create Vite Starter Templates”">&#8203;</a></h2>
<p><a href="/guide/#trying-vite-online">create-vite</a> templates have been a great tool to quickly test Vite with your favorite framework. In Vite 3, all of the templates got a new theme in line with the new docs. Open them online and start playing with Vite 3 now:</p>
<div class="stackblitz-links">
<a target="_blank" href="https://vite.new"><img width="75" height="75" src="../images/vite.svg" alt="Vite logo"></a>
<a target="_blank" href="https://vite.new/vue"><img width="75" height="75" src="../images/vue.svg" alt="Vue logo"></a>
<a target="_blank" href="https://vite.new/svelte"><img width="60" height="60" src="../images/svelte.svg" alt="Svelte logo"></a>
<a target="_blank" href="https://vite.new/react"><img width="75" height="75" src="../images/react.svg" alt="React logo"></a>
<a target="_blank" href="https://vite.new/preact"><img width="65" height="65" src="../images/preact.svg" alt="Preact logo"></a>
<a target="_blank" href="https://vite.new/lit"><img width="60" height="60" src="../images/lit.svg" alt="Lit logo"></a>
</div>
<p>The theme is now shared by all templates. This should help better convey the scope for these starters as minimal templates to get started with Vite. For more complete solutions including linting, testing setup, and other features, there are official Vite-powered templates for some frameworks like <a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">create-vue</a> and <a href="https://github.com/sveltejs/kit" target="_blank" rel="noreferrer">create-svelte</a>. There is a community-maintained list of templates at <a href="https://github.com/vitejs/awesome-vite#templates" target="_blank" rel="noreferrer">Awesome Vite</a>.</p>
<h2 id="dev-improvements" tabindex="-1">Dev Improvements <a class="header-anchor" href="#dev-improvements" aria-label="Permalink to “Dev Improvements”">&#8203;</a></h2>
<h3 id="vite-cli" tabindex="-1">Vite CLI <a class="header-anchor" href="#vite-cli" aria-label="Permalink to “Vite CLI”">&#8203;</a></h3>
<pre style="background-color: var(--vp-code-block-bg);padding:2em;border-radius:8px;max-width:100%;overflow-x:auto;">
  <span style="color:lightgreen"><b>VITE</b></span> <span style="color:lightgreen">v3.0.0</span>  <span style="color:gray">ready in <b>320</b> ms</span>

  <span style="color:lightgreen"><b>➜</b></span>  <span style="color:white"><b>Local</b>:</span>   <span style="color:cyan">http://127.0.0.1:5173/</span>
  <span style="color:green"><b>➜</b></span>  <span style="color:gray"><b>Network</b>: use --host to expose</span>
</pre>
<p>Apart from the CLI’s aesthetics improvements, you’ll notice that the default dev server port is now 5173 and the preview server listening at 4173. This change ensures Vite will avoid collisions with other tools.</p>
<h3 id="improved-websocket-connection-strategy" tabindex="-1">Improved WebSocket Connection Strategy <a class="header-anchor" href="#improved-websocket-connection-strategy" aria-label="Permalink to “Improved WebSocket Connection Strategy”">&#8203;</a></h3>
<p>One of the pain points of Vite 2 was configuring the server when running behind a proxy. Vite 3 changes the default connection scheme so it works out of the box in most scenarios. All these setups are now tested as part of the Vite Ecosystem CI through <a href="https://github.com/sapphi-red/vite-setup-catalogue" target="_blank" rel="noreferrer"><code>vite-setup-catalogue</code></a>.</p>
<h3 id="cold-start-improvements" tabindex="-1">Cold Start Improvements <a class="header-anchor" href="#cold-start-improvements" aria-label="Permalink to “Cold Start Improvements”">&#8203;</a></h3>
<p>Vite now avoids full reload during cold start when imports are injected by plugins while crawling the initial statically imported modules (<a href="https://github.com/vitejs/vite/issues/8869" target="_blank" rel="noreferrer">#8869</a>).</p>
<details>
  <summary><b>Click to learn more</b></summary>
<p>In Vite 2.9, both the scanner and optimizer were run in the background. In the best scenario, where the scanner would find every dependency, no reload was needed in cold start. But if the scanner missed a dependency, a new optimization phase and then a reload were needed. Vite was able to avoid some of these reloads in v2.9, as we detected if the new optimized chunks were compatible with the ones the browser had. But if there was a common dep, the sub-chunks could change and a reload was required to avoid duplicated state. In Vite 3, the optimized deps aren't handed to the browser until the crawling of static imports is done. A quick optimization phase is issued if there is a missing dep (for example, injected by a plugin), and only then, the bundled deps are sent. So, a page reload is no longer needed for these cases.</p>
</details>
<img style="background-color: var(--vp-code-block-bg);padding:4%;border-radius:8px;" width="100%" height="auto" src="../images/vite-3-cold-start.svg" alt="Two graphs comparing Vite 2.9 and Vite 3 optimization strategy">
<h3 id="import-meta-glob" tabindex="-1">import.meta.glob <a class="header-anchor" href="#import-meta-glob" aria-label="Permalink to “import.meta.glob”">&#8203;</a></h3>
<p><code>import.meta.glob</code> support was rewritten. Read about the new features in the <a href="/guide/features.html#glob-import">Glob Import Guide</a>:</p>
<p><a href="/guide/features.html#multiple-patterns">Multiple Patterns</a> can be passed as an array</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./another/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>
</div><p><a href="/guide/features.html#negative-patterns">Negative Patterns</a> are now supported (prefixed with <code>!</code>) to ignore some specific files</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'!**/bar.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>
</div><p><a href="/guide/features.html#named-imports">Named Imports</a> can be specified to improve tree-shaking</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'setup'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span></code></pre>
</div><p><a href="/guide/features.html#custom-queries">Custom Queries</a> can be passed to attach metadata</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { query: { custom: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } })</span></span></code></pre>
</div><p><a href="/guide/features.html#glob-import">Eager Imports</a> is now passed as a flag</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span></code></pre>
</div><h3 id="aligning-wasm-import-with-future-standards" tabindex="-1">Aligning WASM Import with Future Standards <a class="header-anchor" href="#aligning-wasm-import-with-future-standards" aria-label="Permalink to “Aligning WASM Import with Future Standards”">&#8203;</a></h3>
<p>The WebAssembly import API has been revised to avoid collisions with future standards and to make it more flexible:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> init </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './example.wasm?init'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  instance.exports.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>Learn more in the <a href="/guide/features.html#webassembly">WebAssembly guide</a></p>
<h2 id="build-improvements" tabindex="-1">Build Improvements <a class="header-anchor" href="#build-improvements" aria-label="Permalink to “Build Improvements”">&#8203;</a></h2>
<h3 id="esm-ssr-build-by-default" tabindex="-1">ESM SSR Build by Default <a class="header-anchor" href="#esm-ssr-build-by-default" aria-label="Permalink to “ESM SSR Build by Default”">&#8203;</a></h3>
<p>Most SSR frameworks in the ecosystem were already using ESM builds. So, Vite 3 makes ESM the default format for SSR builds. This allows us to streamline previous <a href="https://vite.dev/guide/ssr.html#ssr-externals" target="_blank" rel="noreferrer">SSR externalization heuristics</a>, externalizing dependencies by default.</p>
<h3 id="improved-relative-base-support" tabindex="-1">Improved Relative Base Support <a class="header-anchor" href="#improved-relative-base-support" aria-label="Permalink to “Improved Relative Base Support”">&#8203;</a></h3>
<p>Vite 3 now properly supports relative base (using <code>base: ''</code>), allowing built assets to be deployed to different bases without re-building. This is useful when the base isn't known at build time, for example when deploying to content-addressable networks like <a href="https://ipfs.io/" target="_blank" rel="noreferrer">IPFS</a>.</p>
<h2 id="experimental-features" tabindex="-1">Experimental Features <a class="header-anchor" href="#experimental-features" aria-label="Permalink to “Experimental Features”">&#8203;</a></h2>
<h3 id="built-asset-paths-fine-grained-control-experimental" tabindex="-1">Built Asset Paths fine-grained Control (Experimental) <a class="header-anchor" href="#built-asset-paths-fine-grained-control-experimental" aria-label="Permalink to “Built Asset Paths fine-grained Control (Experimental)”">&#8203;</a></h3>
<p>There are other deploy scenarios where this isn't enough. For example, if the generated hashed assets need to be deployed to a different CDN from the public files, then finer-grained control is required over path generation at build time. Vite 3 provides an experimental API to modify the built file paths. Check <a href="/guide/build.html#advanced-base-options">Build Advanced Base Options</a> for more information.</p>
<h3 id="esbuild-deps-optimization-at-build-time-experimental" tabindex="-1">Esbuild Deps Optimization at Build Time (Experimental) <a class="header-anchor" href="#esbuild-deps-optimization-at-build-time-experimental" aria-label="Permalink to “Esbuild Deps Optimization at Build Time (Experimental)”">&#8203;</a></h3>
<p>One of the main differences between dev and build time is how Vite handles dependencies. During build time, <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> is used to allow importing CJS only dependencies (like React). When using the dev server, esbuild is used instead to pre-bundle and optimize dependencies, and an inline interop scheme is applied while transforming user code importing CJS deps. During the development of Vite 3, we introduced the changes needed to also allow the use of <a href="https://v3.vite.dev/guide/migration.html#using-esbuild-deps-optimization-at-build-time" target="_blank" rel="noreferrer">esbuild to optimize dependencies during build time</a>. <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> can then be avoided, making dev and build time work in the same way.</p>
<p>Given that Rollup v3 will be out in the next months, and we're going to follow up with another Vite major, we've decided to make this mode optional to reduce v3 scope and give Vite and the ecosystem more time to work out possible issues with the new CJS interop approach during build time. Frameworks may switch to using esbuild deps optimization during build time by default at their own pace before Vite 4.</p>
<h3 id="hmr-partial-accept-experimental" tabindex="-1">HMR Partial Accept (Experimental) <a class="header-anchor" href="#hmr-partial-accept-experimental" aria-label="Permalink to “HMR Partial Accept (Experimental)”">&#8203;</a></h3>
<p>There is opt-in support for <a href="https://github.com/vitejs/vite/pull/7324" target="_blank" rel="noreferrer">HMR Partial Accept</a>. This feature could unlock finer-grained HMR for framework components that export several bindings in the same module. You can learn more at <a href="https://github.com/vitejs/vite/discussions/7309" target="_blank" rel="noreferrer">the discussion for this proposal</a>.</p>
<h2 id="bundle-size-reduction" tabindex="-1">Bundle Size Reduction <a class="header-anchor" href="#bundle-size-reduction" aria-label="Permalink to “Bundle Size Reduction”">&#8203;</a></h2>
<p>Vite cares about its publish and install footprint; a fast installation of a new app is a feature. Vite bundles most of its dependencies and tries to use modern lightweight alternatives where possible. Continuing with this ongoing goal, Vite 3 publish size is 30% smaller than v2.</p>
<p>|             | Publish Size | Install Size |
|</p>
]]></description>
            <content:encoded><![CDATA[<h1 id="vite-3-0-is-out" tabindex="-1">Vite 3.0 is out! <a class="header-anchor" href="#vite-3-0-is-out" aria-label="Permalink to “Vite 3.0 is out!”">&#8203;</a></h1>
<p><em>July 23, 2022</em> - Check out the <a href="./announcing-vite4.html">Vite 4.0 announcement</a></p>
<p>In February last year, <a href="https://twitter.com/youyuxi" target="_blank" rel="noreferrer">Evan You</a> released Vite 2. Since then, its adoption has grown non-stop, reaching more than 1 million npm downloads per week. A sprawling ecosystem rapidly formed after the release. Vite is powering a renewed innovation race in Web frameworks. <a href="https://v3.nuxtjs.org/" target="_blank" rel="noreferrer">Nuxt 3</a> uses Vite by default. <a href="https://kit.svelte.dev/" target="_blank" rel="noreferrer">SvelteKit</a>, <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro</a>, <a href="https://hydrogen.shopify.dev/" target="_blank" rel="noreferrer">Hydrogen</a>, and <a href="https://docs.solidjs.com/quick-start" target="_blank" rel="noreferrer">SolidStart</a> are all built with Vite. <a href="https://laravel.com/docs/9.x/vite" target="_blank" rel="noreferrer">Laravel has now decided to use Vite by default</a>. <a href="https://vite-ruby.netlify.app/" target="_blank" rel="noreferrer">Vite Ruby</a> shows how Vite can improve Rails DX. <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a> is making strides as a Vite-native alternative to Jest. Vite is behind <a href="https://docs.cypress.io/guides/component-testing/writing-your-first-component-test" target="_blank" rel="noreferrer">Cypress</a> and <a href="https://playwright.dev/docs/test-components" target="_blank" rel="noreferrer">Playwright</a>'s new Component Testing features, Storybook has <a href="https://github.com/storybookjs/builder-vite" target="_blank" rel="noreferrer">Vite as an official builder</a>. And <a href="https://patak.dev/vite/ecosystem.html" target="_blank" rel="noreferrer">the list goes on</a>. Maintainers from most of these projects got involved in improving the Vite core itself, working closely with the Vite <a href="https://vite.dev/team" target="_blank" rel="noreferrer">team</a> and other contributors.</p>
<p><img src="/og-image-announcing-vite3.webp" alt="Vite 3 Announcement Cover Image" width="2400" height="1200"></p>
<p>Today, 16 months from the v2 launch we are happy to announce the release of Vite 3. We decided to release a new Vite major at least every year to align with <a href="https://nodejs.org/en/about/releases/" target="_blank" rel="noreferrer">Node.js's EOL</a>, and take the opportunity to review Vite's API regularly with a short migration path for projects in the ecosystem.</p>
<p>Quick links:</p>
<ul>
<li><a href="/">Docs</a></li>
<li><a href="https://v3.vite.dev/guide/migration.html" target="_blank" rel="noreferrer">Migration Guide</a></li>
<li><a href="https://github.com/vitejs/vite/blob/main/packages/vite/CHANGELOG.md#300-2022-07-13" target="_blank" rel="noreferrer">Changelog</a></li>
</ul>
<p>If you are new to Vite, we recommend reading the <a href="https://vite.dev/guide/why.html" target="_blank" rel="noreferrer">Why Vite Guide</a>. Then check out <a href="https://vite.dev/guide/" target="_blank" rel="noreferrer">the Getting Started</a> and <a href="https://vite.dev/guide/features" target="_blank" rel="noreferrer">Features guide</a> to see what Vite provides out of the box. As usual, contributions are welcome at <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">GitHub</a>. More than <a href="https://github.com/vitejs/vite/graphs/contributors" target="_blank" rel="noreferrer">600 collaborators</a> have helped improve Vite so far. Follow the updates on <a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">Twitter</a>, or join discussions with other Vite users on our <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord chat server</a>.</p>
<h2 id="new-documentation" tabindex="-1">New Documentation <a class="header-anchor" href="#new-documentation" aria-label="Permalink to “New Documentation”">&#8203;</a></h2>
<p>Go to <a href="https://vite.dev" target="_blank" rel="noreferrer">vite.dev</a> to enjoy the new v3 docs. Vite is now using the new <a href="https://vitepress.vuejs.org" target="_blank" rel="noreferrer">VitePress</a> default theme, with a stunning dark mode between other features.</p>
<p><a href="https://vite.dev" target="_blank" rel="noreferrer"><img src="./../images/v3-docs.webp" alt="Vite documentation frontpage" width="2308" height="854"></a></p>
<p>Several projects in the ecosystem have already migrated to it (see <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a>, <a href="https://vite-plugin-pwa.netlify.app/" target="_blank" rel="noreferrer">vite-plugin-pwa</a>, and <a href="https://vitepress.vuejs.org/" target="_blank" rel="noreferrer">VitePress</a> itself).</p>
<p>If you need to access the Vite 2 docs, they will remain online at <a href="https://v2.vite.dev" target="_blank" rel="noreferrer">v2.vite.dev</a>. There is also a new <a href="https://main.vite.dev" target="_blank" rel="noreferrer">main.vite.dev</a> subdomain, where each commit to Vite’s main branch is auto deployed. This is useful when testing beta versions or contributing to the core’s development.</p>
<p>There is also now an official Spanish translation, that has been added to the previous Chinese and Japanese translations:</p>
<ul>
<li><a href="https://cn.vite.dev/" target="_blank" rel="noreferrer">简体中文</a></li>
<li><a href="https://ja.vite.dev/" target="_blank" rel="noreferrer">日本語</a></li>
<li><a href="https://es.vite.dev/" target="_blank" rel="noreferrer">Español</a></li>
</ul>
<h2 id="create-vite-starter-templates" tabindex="-1">Create Vite Starter Templates <a class="header-anchor" href="#create-vite-starter-templates" aria-label="Permalink to “Create Vite Starter Templates”">&#8203;</a></h2>
<p><a href="/guide/#trying-vite-online">create-vite</a> templates have been a great tool to quickly test Vite with your favorite framework. In Vite 3, all of the templates got a new theme in line with the new docs. Open them online and start playing with Vite 3 now:</p>
<div class="stackblitz-links">
<a target="_blank" href="https://vite.new"><img width="75" height="75" src="../images/vite.svg" alt="Vite logo"></a>
<a target="_blank" href="https://vite.new/vue"><img width="75" height="75" src="../images/vue.svg" alt="Vue logo"></a>
<a target="_blank" href="https://vite.new/svelte"><img width="60" height="60" src="../images/svelte.svg" alt="Svelte logo"></a>
<a target="_blank" href="https://vite.new/react"><img width="75" height="75" src="../images/react.svg" alt="React logo"></a>
<a target="_blank" href="https://vite.new/preact"><img width="65" height="65" src="../images/preact.svg" alt="Preact logo"></a>
<a target="_blank" href="https://vite.new/lit"><img width="60" height="60" src="../images/lit.svg" alt="Lit logo"></a>
</div>
<p>The theme is now shared by all templates. This should help better convey the scope for these starters as minimal templates to get started with Vite. For more complete solutions including linting, testing setup, and other features, there are official Vite-powered templates for some frameworks like <a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">create-vue</a> and <a href="https://github.com/sveltejs/kit" target="_blank" rel="noreferrer">create-svelte</a>. There is a community-maintained list of templates at <a href="https://github.com/vitejs/awesome-vite#templates" target="_blank" rel="noreferrer">Awesome Vite</a>.</p>
<h2 id="dev-improvements" tabindex="-1">Dev Improvements <a class="header-anchor" href="#dev-improvements" aria-label="Permalink to “Dev Improvements”">&#8203;</a></h2>
<h3 id="vite-cli" tabindex="-1">Vite CLI <a class="header-anchor" href="#vite-cli" aria-label="Permalink to “Vite CLI”">&#8203;</a></h3>
<pre style="background-color: var(--vp-code-block-bg);padding:2em;border-radius:8px;max-width:100%;overflow-x:auto;">
  <span style="color:lightgreen"><b>VITE</b></span> <span style="color:lightgreen">v3.0.0</span>  <span style="color:gray">ready in <b>320</b> ms</span>

  <span style="color:lightgreen"><b>➜</b></span>  <span style="color:white"><b>Local</b>:</span>   <span style="color:cyan">http://127.0.0.1:5173/</span>
  <span style="color:green"><b>➜</b></span>  <span style="color:gray"><b>Network</b>: use --host to expose</span>
</pre>
<p>Apart from the CLI’s aesthetics improvements, you’ll notice that the default dev server port is now 5173 and the preview server listening at 4173. This change ensures Vite will avoid collisions with other tools.</p>
<h3 id="improved-websocket-connection-strategy" tabindex="-1">Improved WebSocket Connection Strategy <a class="header-anchor" href="#improved-websocket-connection-strategy" aria-label="Permalink to “Improved WebSocket Connection Strategy”">&#8203;</a></h3>
<p>One of the pain points of Vite 2 was configuring the server when running behind a proxy. Vite 3 changes the default connection scheme so it works out of the box in most scenarios. All these setups are now tested as part of the Vite Ecosystem CI through <a href="https://github.com/sapphi-red/vite-setup-catalogue" target="_blank" rel="noreferrer"><code>vite-setup-catalogue</code></a>.</p>
<h3 id="cold-start-improvements" tabindex="-1">Cold Start Improvements <a class="header-anchor" href="#cold-start-improvements" aria-label="Permalink to “Cold Start Improvements”">&#8203;</a></h3>
<p>Vite now avoids full reload during cold start when imports are injected by plugins while crawling the initial statically imported modules (<a href="https://github.com/vitejs/vite/issues/8869" target="_blank" rel="noreferrer">#8869</a>).</p>
<details>
  <summary><b>Click to learn more</b></summary>
<p>In Vite 2.9, both the scanner and optimizer were run in the background. In the best scenario, where the scanner would find every dependency, no reload was needed in cold start. But if the scanner missed a dependency, a new optimization phase and then a reload were needed. Vite was able to avoid some of these reloads in v2.9, as we detected if the new optimized chunks were compatible with the ones the browser had. But if there was a common dep, the sub-chunks could change and a reload was required to avoid duplicated state. In Vite 3, the optimized deps aren't handed to the browser until the crawling of static imports is done. A quick optimization phase is issued if there is a missing dep (for example, injected by a plugin), and only then, the bundled deps are sent. So, a page reload is no longer needed for these cases.</p>
</details>
<img style="background-color: var(--vp-code-block-bg);padding:4%;border-radius:8px;" width="100%" height="auto" src="../images/vite-3-cold-start.svg" alt="Two graphs comparing Vite 2.9 and Vite 3 optimization strategy">
<h3 id="import-meta-glob" tabindex="-1">import.meta.glob <a class="header-anchor" href="#import-meta-glob" aria-label="Permalink to “import.meta.glob”">&#8203;</a></h3>
<p><code>import.meta.glob</code> support was rewritten. Read about the new features in the <a href="/guide/features.html#glob-import">Glob Import Guide</a>:</p>
<p><a href="/guide/features.html#multiple-patterns">Multiple Patterns</a> can be passed as an array</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./another/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>
</div><p><a href="/guide/features.html#negative-patterns">Negative Patterns</a> are now supported (prefixed with <code>!</code>) to ignore some specific files</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'!**/bar.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">])</span></span></code></pre>
</div><p><a href="/guide/features.html#named-imports">Named Imports</a> can be specified to improve tree-shaking</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'setup'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span></code></pre>
</div><p><a href="/guide/features.html#custom-queries">Custom Queries</a> can be passed to attach metadata</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { query: { custom: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'data'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> } })</span></span></code></pre>
</div><p><a href="/guide/features.html#glob-import">Eager Imports</a> is now passed as a flag</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF">'./dir/*.js'</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">, { eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> })</span></span></code></pre>
</div><h3 id="aligning-wasm-import-with-future-standards" tabindex="-1">Aligning WASM Import with Future Standards <a class="header-anchor" href="#aligning-wasm-import-with-future-standards" aria-label="Permalink to “Aligning WASM Import with Future Standards”">&#8203;</a></h3>
<p>The WebAssembly import API has been revised to avoid collisions with future standards and to make it more flexible:</p>
<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> init </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> './example.wasm?init'</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70">instance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583">=></span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">  instance.exports.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>
</div><p>Learn more in the <a href="/guide/features.html#webassembly">WebAssembly guide</a></p>
<h2 id="build-improvements" tabindex="-1">Build Improvements <a class="header-anchor" href="#build-improvements" aria-label="Permalink to “Build Improvements”">&#8203;</a></h2>
<h3 id="esm-ssr-build-by-default" tabindex="-1">ESM SSR Build by Default <a class="header-anchor" href="#esm-ssr-build-by-default" aria-label="Permalink to “ESM SSR Build by Default”">&#8203;</a></h3>
<p>Most SSR frameworks in the ecosystem were already using ESM builds. So, Vite 3 makes ESM the default format for SSR builds. This allows us to streamline previous <a href="https://vite.dev/guide/ssr.html#ssr-externals" target="_blank" rel="noreferrer">SSR externalization heuristics</a>, externalizing dependencies by default.</p>
<h3 id="improved-relative-base-support" tabindex="-1">Improved Relative Base Support <a class="header-anchor" href="#improved-relative-base-support" aria-label="Permalink to “Improved Relative Base Support”">&#8203;</a></h3>
<p>Vite 3 now properly supports relative base (using <code>base: ''</code>), allowing built assets to be deployed to different bases without re-building. This is useful when the base isn't known at build time, for example when deploying to content-addressable networks like <a href="https://ipfs.io/" target="_blank" rel="noreferrer">IPFS</a>.</p>
<h2 id="experimental-features" tabindex="-1">Experimental Features <a class="header-anchor" href="#experimental-features" aria-label="Permalink to “Experimental Features”">&#8203;</a></h2>
<h3 id="built-asset-paths-fine-grained-control-experimental" tabindex="-1">Built Asset Paths fine-grained Control (Experimental) <a class="header-anchor" href="#built-asset-paths-fine-grained-control-experimental" aria-label="Permalink to “Built Asset Paths fine-grained Control (Experimental)”">&#8203;</a></h3>
<p>There are other deploy scenarios where this isn't enough. For example, if the generated hashed assets need to be deployed to a different CDN from the public files, then finer-grained control is required over path generation at build time. Vite 3 provides an experimental API to modify the built file paths. Check <a href="/guide/build.html#advanced-base-options">Build Advanced Base Options</a> for more information.</p>
<h3 id="esbuild-deps-optimization-at-build-time-experimental" tabindex="-1">Esbuild Deps Optimization at Build Time (Experimental) <a class="header-anchor" href="#esbuild-deps-optimization-at-build-time-experimental" aria-label="Permalink to “Esbuild Deps Optimization at Build Time (Experimental)”">&#8203;</a></h3>
<p>One of the main differences between dev and build time is how Vite handles dependencies. During build time, <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> is used to allow importing CJS only dependencies (like React). When using the dev server, esbuild is used instead to pre-bundle and optimize dependencies, and an inline interop scheme is applied while transforming user code importing CJS deps. During the development of Vite 3, we introduced the changes needed to also allow the use of <a href="https://v3.vite.dev/guide/migration.html#using-esbuild-deps-optimization-at-build-time" target="_blank" rel="noreferrer">esbuild to optimize dependencies during build time</a>. <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noreferrer"><code>@rollup/plugin-commonjs</code></a> can then be avoided, making dev and build time work in the same way.</p>
<p>Given that Rollup v3 will be out in the next months, and we're going to follow up with another Vite major, we've decided to make this mode optional to reduce v3 scope and give Vite and the ecosystem more time to work out possible issues with the new CJS interop approach during build time. Frameworks may switch to using esbuild deps optimization during build time by default at their own pace before Vite 4.</p>
<h3 id="hmr-partial-accept-experimental" tabindex="-1">HMR Partial Accept (Experimental) <a class="header-anchor" href="#hmr-partial-accept-experimental" aria-label="Permalink to “HMR Partial Accept (Experimental)”">&#8203;</a></h3>
<p>There is opt-in support for <a href="https://github.com/vitejs/vite/pull/7324" target="_blank" rel="noreferrer">HMR Partial Accept</a>. This feature could unlock finer-grained HMR for framework components that export several bindings in the same module. You can learn more at <a href="https://github.com/vitejs/vite/discussions/7309" target="_blank" rel="noreferrer">the discussion for this proposal</a>.</p>
<h2 id="bundle-size-reduction" tabindex="-1">Bundle Size Reduction <a class="header-anchor" href="#bundle-size-reduction" aria-label="Permalink to “Bundle Size Reduction”">&#8203;</a></h2>
<p>Vite cares about its publish and install footprint; a fast installation of a new app is a feature. Vite bundles most of its dependencies and tries to use modern lightweight alternatives where possible. Continuing with this ongoing goal, Vite 3 publish size is 30% smaller than v2.</p>
<table tabindex="0">
<thead>
<tr>
<th></th>
<th style="text-align:center">Publish Size</th>
<th style="text-align:center">Install Size</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vite 2.9.14</td>
<td style="text-align:center">4.38MB</td>
<td style="text-align:center">19.1MB</td>
</tr>
<tr>
<td>Vite 3.0.0</td>
<td style="text-align:center">3.05MB</td>
<td style="text-align:center">17.8MB</td>
</tr>
<tr>
<td>Reduction</td>
<td style="text-align:center">-30%</td>
<td style="text-align:center">-7%</td>
</tr>
</tbody>
</table>
<p>In part, this reduction was possible by making some dependencies that most users weren't needing optional. First, <a href="https://github.com/terser/terser" target="_blank" rel="noreferrer">Terser</a> is no longer installed by default. This dependency was no longer needed since we already made esbuild the default minifier for both JS and CSS in Vite 2. If you use <code>build.minify: 'terser'</code>, you'll need to install it (<code>npm add -D terser</code>). We also moved <a href="https://github.com/digitalbazaar/forge" target="_blank" rel="noreferrer">node-forge</a> out of the monorepo, implementing support for automatic https certificate generation as a new plugin: <a href="https://v3.vite.dev/guide/migration.html#automatic-https-certificate-generation" target="_blank" rel="noreferrer"><code>@vitejs/plugin-basic-ssl</code></a>. Since this feature only creates untrusted certificates that are not added to the local store, it didn't justify the added size.</p>
<h2 id="bug-fixing" tabindex="-1">Bug Fixing <a class="header-anchor" href="#bug-fixing" aria-label="Permalink to “Bug Fixing”">&#8203;</a></h2>
<p>A triaging marathon was spearheaded by <a href="https://twitter.com/bluwyoo" target="_blank" rel="noreferrer">@bluwyoo</a>, <a href="https://twitter.com/sapphi_red" target="_blank" rel="noreferrer">@sapphi_red</a>, that recently joined the Vite team. During the past three months, the Vite open issues were reduced from 770 to 400. And this dive was achieved while the newly open PRs were at an all-time high. At the same time, <a href="https://twitter.com/haoqunjiang" target="_blank" rel="noreferrer">@haoqunjiang</a> had also curated a comprehensive <a href="https://github.com/vitejs/vite/discussions/8232" target="_blank" rel="noreferrer">overview of Vite issues</a>.</p>
<p><a href="https://www.repotrends.com/vitejs/vite" target="_blank" rel="noreferrer"><img src="./../images/v3-open-issues-and-PRs.webp" alt="Graph of open issues and pull requests in Vite" width="1826" height="972"></a></p>
<p><a href="https://www.repotrends.com/vitejs/vite" target="_blank" rel="noreferrer"><img src="./../images/v3-new-open-issues-and-PRs.webp" alt="Graph of new issues and pull requests in Vite" width="1826" height="972"></a></p>
<h2 id="compatibility-notes" tabindex="-1">Compatibility Notes <a class="header-anchor" href="#compatibility-notes" aria-label="Permalink to “Compatibility Notes”">&#8203;</a></h2>
<ul>
<li>Vite no longer supports Node.js 12 / 13 / 15, which reached its EOL. Node.js 14.18+ / 16+ is now required.</li>
<li>Vite is now published as ESM, with a CJS proxy to the ESM entry for compatibility.</li>
<li>The Modern Browser Baseline now targets browsers which support the <a href="https://caniuse.com/es6-module" target="_blank" rel="noreferrer">native ES Modules</a>, <a href="https://caniuse.com/es6-module-dynamic-import" target="_blank" rel="noreferrer">native ESM dynamic import</a>, and <a href="https://caniuse.com/mdn-javascript_operators_import_meta" target="_blank" rel="noreferrer"><code>import.meta</code></a> features.</li>
<li>JS file extensions in SSR and library mode now use a valid extension (<code>js</code>, <code>mjs</code>, or <code>cjs</code>) for output JS entries and chunks based on their format and the package type.</li>
</ul>
<p>Learn more in the <a href="https://v3.vite.dev/guide/migration.html" target="_blank" rel="noreferrer">Migration Guide</a>.</p>
<h2 id="upgrades-to-vite-core" tabindex="-1">Upgrades to Vite Core <a class="header-anchor" href="#upgrades-to-vite-core" aria-label="Permalink to “Upgrades to Vite Core”">&#8203;</a></h2>
<p>While working towards Vite 3, we also improved the contributing experience for collaborators to <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">Vite Core</a>.</p>
<ul>
<li>Unit and E2E tests have been migrated to <a href="https://vitest.dev" target="_blank" rel="noreferrer">Vitest</a>, providing a faster and more stable DX. This move also works as dog fooding for an important infrastructure project in the ecosystem.</li>
<li>VitePress build is now tested as part of CI.</li>
<li>Vite upgraded to <a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm 7</a>, following the rest of the ecosystem.</li>
<li>Playgrounds have been moved to <a href="https://github.com/vitejs/vite/tree/main/playground" target="_blank" rel="noreferrer"><code>/playgrounds</code></a> out of packages directory.</li>
<li>The packages and playgrounds are now <code>&quot;type&quot;: &quot;module&quot;</code>.</li>
<li>Plugins are now bundled using <a href="https://github.com/unjs/unbuild" target="_blank" rel="noreferrer">unbuild</a>, and <a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noreferrer">plugin-vue-jsx</a> and <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer">plugin-legacy</a> were moved to TypeScript.</li>
</ul>
<h2 id="the-ecosystem-is-ready-for-v3" tabindex="-1">The Ecosystem is Ready for v3 <a class="header-anchor" href="#the-ecosystem-is-ready-for-v3" aria-label="Permalink to “The Ecosystem is Ready for v3”">&#8203;</a></h2>
<p>We have worked closely with projects in the ecosystem to ensure that frameworks powered by Vite are ready for Vite 3. <a href="https://github.com/vitejs/vite-ecosystem-ci" target="_blank" rel="noreferrer">vite-ecosystem-ci</a> allows us to run the CI's from the leading players in the ecosystem against Vite's main branch and receive timely reports before introducing a regression. Today's release should soon be compatible with most projects using Vite.</p>
<h2 id="acknowledgments" tabindex="-1">Acknowledgments <a class="header-anchor" href="#acknowledgments" aria-label="Permalink to “Acknowledgments”">&#8203;</a></h2>
<p>Vite 3 is the result of the aggregate effort of members of the <a href="/team.html">Vite Team</a> working together with ecosystem project maintainers and other collaborators to Vite core.</p>
<p>We want to thank everyone that have implemented features, and fixes, given feedback, and have been involved in Vite 3:</p>
<ul>
<li>Vite team members <a href="https://twitter.com/youyuxi" target="_blank" rel="noreferrer">@youyuxi</a>, <a href="https://twitter.com/patak_dev" target="_blank" rel="noreferrer">@patak_dev</a>, <a href="https://twitter.com/antfu7" target="_blank" rel="noreferrer">@antfu7</a>, <a href="https://twitter.com/bluwyoo" target="_blank" rel="noreferrer">@bluwyoo</a>, <a href="https://twitter.com/sapphi_red" target="_blank" rel="noreferrer">@sapphi_red</a>, <a href="https://twitter.com/haoqunjiang" target="_blank" rel="noreferrer">@haoqunjiang</a>, <a href="https://github.com/poyoho" target="_blank" rel="noreferrer">@poyoho</a>, <a href="https://twitter.com/Shini_92" target="_blank" rel="noreferrer">@Shini_92</a>, and <a href="https://twitter.com/retropragma" target="_blank" rel="noreferrer">@retropragma</a>.</li>
<li><a href="https://github.com/benmccann" target="_blank" rel="noreferrer">@benmccann</a>, <a href="https://twitter.com/danielcroe" target="_blank" rel="noreferrer">@danielcroe</a>, <a href="https://twitter.com/brillout" target="_blank" rel="noreferrer">@brillout</a>, <a href="https://twitter.com/sheremet_va" target="_blank" rel="noreferrer">@sheremet_va</a>, <a href="https://twitter.com/userquin" target="_blank" rel="noreferrer">@userquin</a>, <a href="https://twitter.com/enzoinnocenzi" target="_blank" rel="noreferrer">@enzoinnocenzi</a>, <a href="https://twitter.com/maximomussini" target="_blank" rel="noreferrer">@maximomussini</a>, <a href="https://twitter.com/IanVanSchooten" target="_blank" rel="noreferrer">@IanVanSchooten</a>, the <a href="https://astro.build/" target="_blank" rel="noreferrer">Astro team</a>, and all other maintainers of frameworks and plugins in the ecosystem in that helped shape v3.</li>
<li><a href="https://github.com/dominikg" target="_blank" rel="noreferrer">@dominikg</a> for his work on vite-ecosystem-ci.</li>
<li><a href="https://twitter.com/ZoltanKochan" target="_blank" rel="noreferrer">@ZoltanKochan</a> for his work on <a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a>, and for his responsiveness when we needed support with it.</li>
<li><a href="https://github.com/rixo" target="_blank" rel="noreferrer">@rixo</a> for HMR Partial Accept support.</li>
<li><a href="https://twitter.com/KiaKing85" target="_blank" rel="noreferrer">@KiaKing85</a> for getting the theme ready for the Vite 3 release, and <a href="https://twitter.com/_brc_dd" target="_blank" rel="noreferrer">@_brc_dd</a> for working on the VitePress internals.</li>
<li><a href="https://twitter.com/CodingWithCego" target="_blank" rel="noreferrer">@CodingWithCego</a> for the new Spanish translation, and <a href="https://twitter.com/ShenQingchuan" target="_blank" rel="noreferrer">@ShenQingchuan</a>, <a href="https://github.com/hiro-lapis" target="_blank" rel="noreferrer">@hiro-lapis</a> and others in the Chinese and Japanese translations teams for keeping the translated docs up to date.</li>
</ul>
<p>We also want to thank individuals and companies sponsoring the Vite team, and companies investing in Vite development: some of <a href="https://twitter.com/antfu7" target="_blank" rel="noreferrer">@antfu7</a>'s work on Vite and the ecosystem is part of his job at <a href="https://nuxtlabs.com/" target="_blank" rel="noreferrer">Nuxt Labs</a>, and <a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a> hired <a href="https://twitter.com/patak_dev" target="_blank" rel="noreferrer">@patak_dev</a> to work full time on Vite.</p>
<h2 id="what-s-next" tabindex="-1">What's Next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to “What's Next”">&#8203;</a></h2>
<p>We'll take the following months to ensure a smooth transition for all the projects built on top of Vite. So the first minors will be focused on continuing our triaging efforts with a focus on newly opened issues.</p>
<p>The Rollup team is <a href="https://twitter.com/lukastaegert/status/1544186847399743488" target="_blank" rel="noreferrer">working on its next major</a>, to be released in the following months. Once the Rollup plugins ecosystem has time to update, we'll follow up with a new Vite major. This will give us another opportunity to introduce more significant changes this year, which we could take to stabilize some of the experimental features introduced in this release.</p>
<p>If you are interested in helping improve Vite, the best way to get on board is to help with triaging issues. Join <a href="https://chat.vite.dev" target="_blank" rel="noreferrer">our Discord</a> and look for the <code>#contributing</code> channel. Or get involved in our <code>#docs</code>, <code>#help</code> others, or create plugins. We are just getting started. There are many open ideas to keep improving Vite's DX.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Announcing Vite 2.0]]></title>
            <link>https://vite.dev/blog/announcing-vite2.html</link>
            <guid isPermaLink="false">https://vite.dev/blog/announcing-vite2.html</guid>
            <pubDate>Tue, 16 Feb 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="announcing-vite-2-0" tabindex="-1">Vite 2.0 发布了 <a class="header-anchor" href="#announcing-vite-2-0" aria-label="Permalink to “Vite 2.0 发布了”">&#8203;</a></h1>
<p><em>February 16, 2021</em> - Check out the <a href="./announcing-vite3.html">Vite 3.0 announcement</a></p>
<p style="text-align:center">
  <img src="/logo.svg" style="height:200px">
</p>
<p>今天我们很高兴地宣布，Vite 2.0 正式发布了！</p>
<p>Vite（法语意思是 “快”，发音为 <code>/vit/</code>，类似 veet）是一种全新的前端构建工具。你可以把它理解为一个开箱即用的开发服务器 + 打包工具的组合，但是更轻更快。Vite 利用浏览器 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noreferrer">原生的 ES 模块支持</a> 和用来编译到原生语言的开发工具（如 <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a>）来提供一个快速且现代的开发体验。</p>
<p>想知道 Vite 有多快？看看这个<a href="https://twitter.com/amasad/status/1355379680275128321" target="_blank" rel="noreferrer">视频比较</a>， 在 Repl.it 上从零启动一个基于 Vite 的 React 应用，浏览器页面加载完毕的时候，基于 CRA（<code>create-react-app</code>）的应用甚至还没有安装完依赖。</p>
<p>如果你还没听说过 Vite 到底是什么，可以到 <a href="/guide/why.html">这里</a> 了解一下项目的设计初衷。如果你想要了解 Vite 跟其它一些类似的工具有什么区别，可以参考这里的 <a href="https://v5.vite.dev/guide/comparisons.html" target="_blank" rel="noreferrer">对比</a>。</p>
<h2 id="whats-new-in-2-0" tabindex="-1">2.0 带来了什么 <a class="header-anchor" href="#whats-new-in-2-0" aria-label="Permalink to “2.0 带来了什么”">&#8203;</a></h2>
<p>Vite 1.0 虽然之前进入了 RC 阶段，但在发布之前我们决定进行一次彻底的重构来解决一些设计缺陷。所以 Vite 2.0 其实是 Vite 的第一个稳定版本。2.0 带来了大量的改进：</p>
<h3 id="framework-agnostic-core" tabindex="-1">多框架支持 <a class="header-anchor" href="#framework-agnostic-core" aria-label="Permalink to “多框架支持”">&#8203;</a></h3>
<p>设计 Vite 的初衷是为了 <a href="https://github.com/vuejs/vue-dev-server" target="_blank" rel="noreferrer">探索黑客原型项目以更好的支持 Vue 单文件组件</a>。Vite 1 则是这个想法的延续，并在此基础上增加了对 HMR 支持。</p>
<p>但 2.0 基于之前的经验提供了一个更稳定灵活的内部架构，从而可以完全通过插件机制来支持任意框架。现在 Vite 提供 <a href="https://github.com/vitejs/vite/tree/main/packages/create-vite" target="_blank" rel="noreferrer">官方的 Vue, React, Preact, Lit Element 项目模版</a>，而 Svelte 社区也在开发 Vite 整合方案。</p>
<h3 id="new-plugin-format-and-api" tabindex="-1">全新插件机制和 API <a class="header-anchor" href="#new-plugin-format-and-api" aria-label="Permalink to “全新插件机制和 API”">&#8203;</a></h3>
<p>Vite 2.0 受 <a href="https://github.com/preactjs/wmr" target="_blank" rel="noreferrer">WMR</a> 的启发采用了基于 Rollup 插件 API 的设计。<a href="https://vite-rollup-plugins.patak.dev/" target="_blank" rel="noreferrer">很多 Rollup 插件可以跟 Vite 直接兼容</a>。插件可以在使用 Rollup 插件钩子之外使用一些额外的 Vite 特有的 API 来处理一些打包中不存在的需求，比如区分开发与生产环境 ，或是自定义热更新处理。</p>
<p>Vite 的 <a href="/guide/api-javascript.html">程序化 API</a> 也得到了大幅改进 - 已经有不少用户在开发基于 Vite 的上层框架，Nuxt 团队也已经在 Nuxt 3 中验证了初步整合的可行性。</p>
<h3 id="esbuild-powered-dep-pre-bundling" tabindex="-1">基于 esbuild 的依赖预打包 <a class="header-anchor" href="#esbuild-powered-dep-pre-bundling" aria-label="Permalink to “基于 esbuild 的依赖预打包”">&#8203;</a></h3>
<p>由于 Vite 是一个基于 原生 ESM 开发服务器，所以它需要进行依赖预打包以减少浏览器请求的数量，并进行 CommonJS 到 ESM 的转换。在之前版本中 Vite 是用 Rollup 来完成的，而在 2.0 中切换到了 esbuild，这使得依赖预打包的速度快了几十倍。作为参考，在 M1 芯片的 MacBook Pro 上，冷启动一个具有大量依赖项（如 React Meterial UI）的测试应用，之前需要 28 秒，而现在只需要约 1.5 秒。从 webpack 或其它打包工具迁移到 Vite 应该也会有类似的速度改善。</p>
<h3 id="first-class-css-support" tabindex="-1">更好的 CSS 支持 <a class="header-anchor" href="#first-class-css-support" aria-label="Permalink to “更好的 CSS 支持”">&#8203;</a></h3>
<p>Vite 将 CSS 看作模块系统中的一等公民，并且内置了以下支持：</p>
<ul>
<li><strong>强化路径解析</strong>：CSS 中的 @import 和 url() 路径都通过 Vite 的路径解析器来解析，从而支持 alias 和 npm 依赖。</li>
<li><strong>自动 URL 改写</strong>：所有 url() 路径都会被自动改写从而确保在开发和构建中都指向正确的文件路径。</li>
<li><strong>CSS 代码分割</strong>：构建时每一个被分割的 JS 文件都会自动生成一个对应的 CSS 文件，当被请求时，该文件会自动与 JS 文件并行加载。</li>
</ul>
<h3 id="server-side-rendering-ssr-support" tabindex="-1">服务端渲染（SSR）支持 <a class="header-anchor" href="#server-side-rendering-ssr-support" aria-label="Permalink to “服务端渲染（SSR）支持”">&#8203;</a></h3>
<p>Vite 2.0 提供 <a href="/guide/ssr.html">实验性的 SSR 支持</a>。Vite 提供了灵活的 API，以便于在开发过程中直接通过 Node.js 高效率地加载和更新 ESM 的源码（几乎与服务端的 HMR 一致），并自动外部化与 CommonJS 兼容的依赖关系，以提高开发和 SSR 的构建速度。生产环境下，服务器可以和 Vite 完全解耦。基于 Vite SSR 的架构也可以很方便的做静态预渲染（SSG）。</p>
<p>Vite SSR 会作为一个底层功能，而我们期待看到更高层级的框架在此基础上的应用。</p>
<h3 id="opt-in-legacy-browser-support" tabindex="-1">旧浏览器支持 <a class="header-anchor" href="#opt-in-legacy-browser-support" aria-label="Permalink to “旧浏览器支持”">&#8203;</a></h3>
<p>Vite 默认只支持原生支持 ESM 的现代浏览器，但可以通过官方的 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noreferrer">@vitejs/plugin-legacy</a> 来支持旧浏览器。legacy 插件会自动额外生成一个针对旧浏览器的包，并且在 html 中插入根据浏览器 ESM 支持来选择性加载对应包的代码（类似 vue-cli 的 modern mode）。</p>
<h2 id="give-it-a-try" tabindex="-1">尝试一下！ <a class="header-anchor" href="#give-it-a-try" aria-label="Permalink to “尝试一下！”">&#8203;</a></h2>
<p>功能是很多，但试一下其实很简单。用以下命令，一下就可以搭起一个基于 vite 的项目（确保你的 Node.js 版本 &gt;=12）：</p>
<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e" tabindex="0" dir="ltr" v-pre=""><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF"> @vitejs/app</span></span></code></pre>
</div><p>然后，你可以阅读 <a href="/guide/">指引文档</a> 了解 Vite 提供了哪些开箱即用的功能，也可以在 <a href="https://github.com/vitejs/vite" target="_blank" rel="noreferrer">GitHub</a> 上查看源码，关注我们的 <a href="https://twitter.com/vite_js" target="_blank" rel="noreferrer">Twitter</a> 以了解最新的进展，或与其他 Vite 用户在 <a href="http://chat.vite.dev/" target="_blank" rel="noreferrer">Discord</a> 上一起讨论。</p>
]]></content:encoded>
        </item>
    </channel>
</rss>